webpackJsonp([5],{0:function(t,Q,F){t.exports=F(63)},40:function(module,exports){eval("module.exports = window.ReactDOM;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3cuUmVhY3RET01cIj9kZmYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuUmVhY3RET007XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJ3aW5kb3cuUmVhY3RET01cIlxuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSA1Il0sInNvdXJjZVJvb3QiOiIifQ==")},41:function(module,exports){eval('\'use strict\';\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nfunction getCookie(cname) {\n  var name = cname + "=";\n  var ca = decodeURIComponent(document.cookie).split(\';\');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == \' \') {\n      c = c.substring(1);\n    }if (c.indexOf(name) != -1) return c.substring(name.length, c.length);\n  }\n  return \'\';\n}\n\nfunction setCookie(name, value, cfg) {\n  var Days = 30;\n  var exp = new Date();\n  exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);\n  document.cookie = name + "=" + escape(value) + \';path=\' + cfg.path + ";expires=" + exp.toGMTString();\n  return true;\n}\n\nfunction Base64() {\n  // private property\n  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";\n\n  // public method for encoding\n  this.encode = function (input) {\n    var output = "";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    input = _utf8_encode(input);\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n    }\n    return output;\n  };\n  // public method for decoding\n  this.decode = function (input) {\n    var output = "";\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, "");\n    while (i < input.length) {\n      enc1 = _keyStr.indexOf(input.charAt(i++));\n      enc2 = _keyStr.indexOf(input.charAt(i++));\n      enc3 = _keyStr.indexOf(input.charAt(i++));\n      enc4 = _keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output = output + String.fromCharCode(chr1);\n      if (enc3 != 64) {\n        output = output + String.fromCharCode(chr2);\n      }\n      if (enc4 != 64) {\n        output = output + String.fromCharCode(chr3);\n      }\n    }\n    output = _utf8_decode(output);\n    return output;\n  };\n  // private method for UTF-8 encoding\n  var _utf8_encode = function _utf8_encode(string) {\n    string = string.replace(/\\r\\n/g, "\\n");\n    var utftext = "";\n    for (var n = 0; n < string.length; n++) {\n      var c = string.charCodeAt(n);\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      } else if (c > 127 && c < 2048) {\n        utftext += String.fromCharCode(c >> 6 | 192);\n        utftext += String.fromCharCode(c & 63 | 128);\n      } else {\n        utftext += String.fromCharCode(c >> 12 | 224);\n        utftext += String.fromCharCode(c >> 6 & 63 | 128);\n        utftext += String.fromCharCode(c & 63 | 128);\n      }\n    }\n    return utftext;\n  };\n  // private method for UTF-8 decoding\n  var _utf8_decode = function _utf8_decode(utftext) {\n    var string = "";\n    var i = 0;\n    var c = 0,\n        c1 = 0,\n        c2 = 0,\n        c3 = 0;\n    while (i < utftext.length) {\n      c = utftext.charCodeAt(i);\n      if (c < 128) {\n        string += String.fromCharCode(c);\n        i++;\n      } else if (c > 191 && c < 224) {\n        c2 = utftext.charCodeAt(i + 1);\n        string += String.fromCharCode((c & 31) << 6 | c2 & 63);\n        i += 2;\n      } else {\n        c2 = utftext.charCodeAt(i + 1);\n        c3 = utftext.charCodeAt(i + 2);\n        string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n        i += 3;\n      }\n    }\n    return string;\n  };\n}\n\nfunction getDevice(u) {\n  return {\n    mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端\n    ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端\n    android: u.indexOf(\'Android\') > -1 || u.indexOf(\'Linux\') > -1, //android终端\n    iPhone: u.indexOf(\'iPhone\') > -1, //是否为iPhone\n    iPad: u.indexOf(\'iPad\') > -1 //是否iPad\n  };\n}\n\nfunction formatPercentage(num) {\n  return Math.round(num * 1000).toFixed() / 10;\n}\n\nvar base64 = new Base64();\n\nfunction getPageType(url) {\n  if (!url) url = \'/\';\n  return {\n    homePage: !!url.match(/^\\/$/),\n    listPage: !!url.match(/^\\/list$/),\n    specialListPage: !!url.match(/^\\/list(\\/\\w+)$/),\n    detailPage: !!url.match(/^\\/detail$|^\\/detail(\\/\\d+)$/),\n    newPage: !!url.match(/^\\/new$/)\n  };\n}\n\nexports.getCookie = getCookie;\nexports.setCookie = setCookie;\nexports.base64 = base64;\nexports.getDevice = getDevice;\nexports.formatPercentage = formatPercentage;\nexports.getPageType = getPageType;//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},59:function(module,exports,__webpack_require__){eval("'use strict';\n\n// import React from 'react';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(1);\n\nvar _reactRouter = __webpack_require__(16);\n\nvar _transition = __webpack_require__(60);\n\nvar _transition2 = _interopRequireDefault(_transition);\n\nvar _utils = __webpack_require__(41);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Header = function (_Component) {\n\t_inherits(Header, _Component);\n\n\tfunction Header(props) {\n\t\t_classCallCheck(this, Header);\n\n\t\treturn _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));\n\t}\n\n\t_createClass(Header, [{\n\t\tkey: 'componentWillMount',\n\t\tvalue: function componentWillMount() {\n\t\t\tuserInfo.name = _utils.base64.decode((0, _utils.getCookie)('name'));\n\t\t\tuserInfo.avatar = _utils.base64.decode((0, _utils.getCookie)('avatar'));\n\t\t\t// userInfo.id = base64.decode(getCookie('id'));\n\t\t}\n\t}, {\n\t\tkey: 'signOut',\n\t\tvalue: function signOut() {\n\t\t\t(0, _utils.setCookie)('name', '', { path: '/' });\n\t\t\t(0, _utils.setCookie)('avatar', '', { path: '/' });\n\t\t\t(0, _utils.setCookie)('id', '', { path: '/' });\n\t\t\t(0, _utils.setCookie)('email', '', { path: '/' });\n\t\t\tlocation.reload();\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _imgUrl = userInfo.avatar;\n\t\t\treturn React.createElement(\n\t\t\t\t'div',\n\t\t\t\tnull,\n\t\t\t\tReact.createElement(_transition2.default, null),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'nav',\n\t\t\t\t\t{ className: 'navbar navbar-inverse', style: { \"margin-bottom\": \"1px\" } },\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ className: 'container-fluid' },\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'div',\n\t\t\t\t\t\t\t{ className: 'navbar-header' },\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t\t{ type: 'button', className: 'navbar-toggle collapsed', 'data-toggle': 'collapse', 'data-target': '#bs-example-navbar-collapse-1', 'aria-expanded': 'false' },\n\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t'span',\n\t\t\t\t\t\t\t\t\t{ className: 'sr-only' },\n\t\t\t\t\t\t\t\t\t'Toggle navigation'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tReact.createElement('span', { className: 'icon-bar' }),\n\t\t\t\t\t\t\t\tReact.createElement('span', { className: 'icon-bar' }),\n\t\t\t\t\t\t\t\tReact.createElement('span', { className: 'icon-bar' })\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t{ className: 'navbar-brand', href: '/' },\n\t\t\t\t\t\t\t\t'Voting'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t'div',\n\t\t\t\t\t\t\t{ className: 'collapse navbar-collapse', id: 'bs-example-navbar-collapse-1' },\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t'ul',\n\t\t\t\t\t\t\t\t{ className: 'nav navbar-nav' },\n\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t{ className: 'active' },\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t{ href: '/' },\n\t\t\t\t\t\t\t\t\t\t'Home',\n\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t'span',\n\t\t\t\t\t\t\t\t\t\t\t{ className: 'sr-only' },\n\t\t\t\t\t\t\t\t\t\t\t'(current)'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t!(0, _utils.getPageType)(location.pathname).listPage && React.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t_reactRouter.Link,\n\t\t\t\t\t\t\t\t\t\t{ to: '/list' },\n\t\t\t\t\t\t\t\t\t\t'All Polls'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t!(0, _utils.getPageType)(location.pathname).specialListPage && userInfo.name && React.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t_reactRouter.Link,\n\t\t\t\t\t\t\t\t\t\t{ to: \"/list/\" + userInfo.name },\n\t\t\t\t\t\t\t\t\t\t'My Polls'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t!(0, _utils.getPageType)(location.pathname).newPage && userInfo.name && React.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t_reactRouter.Link,\n\t\t\t\t\t\t\t\t\t\t{ to: '/new' },\n\t\t\t\t\t\t\t\t\t\t'Create a new Poll'\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t'ul',\n\t\t\t\t\t\t\t\t{ className: 'nav navbar-nav navbar-right' },\n\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\tuserInfo.name && React.createElement('img', {\n\t\t\t\t\t\t\t\t\t\t\tsrc: userInfo.avatar,\n\t\t\t\t\t\t\t\t\t\t\twidth: '20px',\n\t\t\t\t\t\t\t\t\t\t\tstyle: { \"border-radius\": \"3px\" }\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t{ className: 'dropdown' },\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t{ href: '#', className: 'dropdown-toggle',\n\t\t\t\t\t\t\t\t\t\t\t'data-toggle': 'dropdown',\n\t\t\t\t\t\t\t\t\t\t\trole: 'button',\n\t\t\t\t\t\t\t\t\t\t\t'aria-haspopup': 'true',\n\t\t\t\t\t\t\t\t\t\t\t'aria-expanded': 'false' },\n\t\t\t\t\t\t\t\t\t\tReact.createElement('span', { className: 'glyphicon glyphicon-user' }),\n\t\t\t\t\t\t\t\t\t\tReact.createElement('span', { className: 'caret' })\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t'ul',\n\t\t\t\t\t\t\t\t\t\t{ className: 'dropdown-menu' },\n\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t\t\t{ href: '/login/github' + '?currentPath=' + location.pathname },\n\t\t\t\t\t\t\t\t\t\t\t\tuserInfo.name ? userInfo.name : 'Sign in'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t\t\t{ href: 'https://github.com/elevenBeans/WeVoting', target: '_blank' },\n\t\t\t\t\t\t\t\t\t\t\t\t'Github resposity'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tReact.createElement('li', { role: 'separator', className: 'divider' }),\n\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t\t\t{ href: 'http://bin11.cn', target: '_blank' },\n\t\t\t\t\t\t\t\t\t\t\t\t'About author'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tuserInfo.name && React.createElement(\n\t\t\t\t\t\t\t\t\t\t\t'li',\n\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\t\t\t\t\t'a',\n\t\t\t\t\t\t\t\t\t\t\t\t{ href: '', onClick: this.signOut },\n\t\t\t\t\t\t\t\t\t\t\t\t' Sign out '\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn Header;\n}(_react.Component);\n\nexports.default = Header;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},60:function(module,exports,__webpack_require__){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n\tvalue: true\n});\n\nvar _react = __webpack_require__(1);\n\nvar Transition = function Transition() {\n\treturn React.createElement(\n\t\t"div",\n\t\t{\n\t\t\tid: "globalTransition",\n\t\t\tstyle: {\n\t\t\t\t"width": "100%",\n\t\t\t\t"height": "100%",\n\t\t\t\t"position": "fixed",\n\t\t\t\t"zIndex": "999",\n\t\t\t\t"display": "none",\n\t\t\t\t"background-color": "rgba(0,0,0,0.2)"\n\t\t\t}\n\t\t},\n\t\tReact.createElement(\n\t\t\t"svg",\n\t\t\t{ width: "150px", height: "150px",\n\t\t\t\txmlns: "http://www.w3.org/2000/svg",\n\t\t\t\tviewBox: "0 0 100 100", preserveAspectRatio: "xMidYMid",\n\t\t\t\t"class": "uil-gears",\n\t\t\t\tstyle: {\n\t\t\t\t\t"position": "fixed",\n\t\t\t\t\t"top": "50%",\n\t\t\t\t\t"left": "50%",\n\t\t\t\t\t"transform": "translate3d(-50%,-50%,0)" /*向左向上移动自身尺寸的一半*/\n\t\t\t\t}\n\t\t\t},\n\t\t\tReact.createElement("rect", { x: "0", y: "0", width: "100", height: "100", fill: "none", "class": "bk" }),\n\t\t\tReact.createElement(\n\t\t\t\t"g",\n\t\t\t\t{ transform: "translate(-20,-20)" },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"path",\n\t\t\t\t\t{ d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z", fill: "#000000" },\n\t\t\t\t\tReact.createElement("animateTransform", {\n\t\t\t\t\t\tattributeName: "transform",\n\t\t\t\t\t\ttype: "rotate",\n\t\t\t\t\t\tfrom: "90 50 50", to: "0 50 50", dur: "1s",\n\t\t\t\t\t\trepeatCount: "indefinite"\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t"g",\n\t\t\t\t{ transform: "translate(20,20) rotate(15 50 50)" },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t"path",\n\t\t\t\t\t{ d: "M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z", fill: "#9f9fab" },\n\t\t\t\t\tReact.createElement("animateTransform", {\n\t\t\t\t\t\tattributeName: "transform",\n\t\t\t\t\t\ttype: "rotate", from: "0 50 50", to: "90 50 50", dur: "1s",\n\t\t\t\t\t\trepeatCount: "indefinite" })\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n};\n\nexports.default = Transition;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvY29tcG9uZW50cy90cmFuc2l0aW9uLmpzeD85NWRkIl0sIm5hbWVzIjpbIlRyYW5zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUdBLElBQU1BLGFBQWEsU0FBYkEsVUFBYTtBQUFBLFFBQ2xCO0FBQUE7QUFBQTtBQUNDLE9BQUssa0JBRE47QUFFQyxVQUFTO0FBQ1IsYUFBUSxNQURBO0FBRVIsY0FBUyxNQUZEO0FBR1IsZ0JBQVcsT0FISDtBQUlSLGNBQVMsS0FKRDtBQUtSLGVBQVUsTUFMRjtBQU1SLHdCQUFtQjtBQU5YO0FBRlY7QUFXQztBQUFBO0FBQUEsS0FBSyxPQUFNLE9BQVgsRUFBbUIsUUFBTyxPQUExQjtBQUNDLFdBQU0sNEJBRFA7QUFFQyxhQUFRLGFBRlQsRUFFdUIscUJBQW9CLFVBRjNDO0FBR0MsYUFBTSxXQUhQO0FBSUMsV0FBUztBQUNSLGlCQUFXLE9BREg7QUFFUixZQUFNLEtBRkU7QUFHUixhQUFPLEtBSEM7QUFJUixrQkFBWSwwQkFKSixDQUkrQjtBQUovQjtBQUpWO0FBV0MsaUNBQU0sR0FBRSxHQUFSLEVBQVksR0FBRSxHQUFkLEVBQWtCLE9BQU0sS0FBeEIsRUFBOEIsUUFBTyxLQUFyQyxFQUEyQyxNQUFLLE1BQWhELEVBQXVELFNBQU0sSUFBN0QsR0FYRDtBQVlDO0FBQUE7QUFBQSxNQUFHLFdBQVUsb0JBQWI7QUFDQTtBQUFBO0FBQUEsT0FBTSxHQUFFLHU1QkFBUixFQUFnNkIsTUFBSyxTQUFyNkI7QUFDQztBQUNDLHFCQUFjLFdBRGY7QUFFQyxZQUFLLFFBRk47QUFHQyxZQUFLLFVBSE4sRUFHaUIsSUFBRyxTQUhwQixFQUc4QixLQUFJLElBSGxDO0FBSUMsbUJBQVk7QUFKYjtBQUREO0FBREEsSUFaRDtBQXVCQztBQUFBO0FBQUEsTUFBRyxXQUFVLG1DQUFiO0FBQ0M7QUFBQTtBQUFBLE9BQU0sR0FBRSx1NUJBQVIsRUFBZzZCLE1BQUssU0FBcjZCO0FBQ0M7QUFDQyxxQkFBYyxXQURmO0FBRUMsWUFBSyxRQUZOLEVBRWUsTUFBSyxTQUZwQixFQUU4QixJQUFHLFVBRmpDLEVBRTRDLEtBQUksSUFGaEQ7QUFHQyxtQkFBWSxZQUhiO0FBREQ7QUFERDtBQXZCRDtBQVhELEVBRGtCO0FBQUEsQ0FBbkI7O2tCQWlEZUEsVSIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG5jb25zdCBUcmFuc2l0aW9uID0gKCkgPT4gKFxyXG5cdDxkaXZcclxuXHRcdGlkID0gXCJnbG9iYWxUcmFuc2l0aW9uXCJcclxuXHRcdHN0eWxlID0ge3tcclxuXHRcdFx0XCJ3aWR0aFwiOlwiMTAwJVwiLFxyXG5cdFx0XHRcImhlaWdodFwiOlwiMTAwJVwiLFxyXG5cdFx0XHRcInBvc2l0aW9uXCI6XCJmaXhlZFwiLFxyXG5cdFx0XHRcInpJbmRleFwiOlwiOTk5XCIsXHJcblx0XHRcdFwiZGlzcGxheVwiOlwibm9uZVwiLFxyXG5cdFx0XHRcImJhY2tncm91bmQtY29sb3JcIjpcInJnYmEoMCwwLDAsMC4yKVwiXHJcblx0XHR9fVxyXG5cdD5cclxuXHRcdDxzdmcgd2lkdGg9JzE1MHB4JyBoZWlnaHQ9JzE1MHB4J1xyXG5cdFx0XHR4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuXHRcdFx0dmlld0JveD1cIjAgMCAxMDAgMTAwXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkXCJcclxuXHRcdFx0Y2xhc3M9XCJ1aWwtZ2VhcnNcIlxyXG5cdFx0XHRzdHlsZSA9IHt7XHJcblx0XHRcdFx0XCJwb3NpdGlvblwiOlwiZml4ZWRcIixcclxuXHRcdFx0XHRcInRvcFwiOlwiNTAlXCIsXHJcblx0XHRcdFx0XCJsZWZ0XCI6XCI1MCVcIixcclxuXHRcdFx0XHRcInRyYW5zZm9ybVwiOlwidHJhbnNsYXRlM2QoLTUwJSwtNTAlLDApXCIgLyrlkJHlt6blkJHkuIrnp7vliqjoh6rouqvlsLrlr7jnmoTkuIDljYoqL1xyXG5cdFx0XHR9fVxyXG5cdFx0PlxyXG5cdFx0XHQ8cmVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDBcIiBoZWlnaHQ9XCIxMDBcIiBmaWxsPVwibm9uZVwiIGNsYXNzPVwiYmtcIj48L3JlY3Q+XHJcblx0XHRcdDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMjAsLTIwKVwiPlxyXG5cdFx0XHQ8cGF0aCBkPVwiTTc5LjksNTIuNkM4MCw1MS44LDgwLDUwLjksODAsNTBzMC0xLjgtMC4xLTIuNmwtNS4xLTAuNGMtMC4zLTIuNC0wLjktNC42LTEuOC02LjdsNC4yLTIuOWMtMC43LTEuNi0xLjYtMy4xLTIuNi00LjUgTDcwLDM1Yy0xLjQtMS45LTMuMS0zLjUtNC45LTQuOWwyLjItNC42Yy0xLjQtMS0yLjktMS45LTQuNS0yLjZMNTkuOCwyN2MtMi4xLTAuOS00LjQtMS41LTYuNy0xLjhsLTAuNC01LjFDNTEuOCwyMCw1MC45LDIwLDUwLDIwIHMtMS44LDAtMi42LDAuMWwtMC40LDUuMWMtMi40LDAuMy00LjYsMC45LTYuNywxLjhsLTIuOS00LjFjLTEuNiwwLjctMy4xLDEuNi00LjUsMi42bDIuMSw0LjZjLTEuOSwxLjQtMy41LDMuMS01LDQuOWwtNC41LTIuMSBjLTEsMS40LTEuOSwyLjktMi42LDQuNWw0LjEsMi45Yy0wLjksMi4xLTEuNSw0LjQtMS44LDYuOGwtNSwwLjRDMjAsNDguMiwyMCw0OS4xLDIwLDUwczAsMS44LDAuMSwyLjZsNSwwLjQgYzAuMywyLjQsMC45LDQuNywxLjgsNi44bC00LjEsMi45YzAuNywxLjYsMS42LDMuMSwyLjYsNC41bDQuNS0yLjFjMS40LDEuOSwzLjEsMy41LDUsNC45bC0yLjEsNC42YzEuNCwxLDIuOSwxLjksNC41LDIuNmwyLjktNC4xIGMyLjEsMC45LDQuNCwxLjUsNi43LDEuOGwwLjQsNS4xQzQ4LjIsODAsNDkuMSw4MCw1MCw4MHMxLjgsMCwyLjYtMC4xbDAuNC01LjFjMi4zLTAuMyw0LjYtMC45LDYuNy0xLjhsMi45LDQuMiBjMS42LTAuNywzLjEtMS42LDQuNS0yLjZMNjUsNjkuOWMxLjktMS40LDMuNS0zLDQuOS00LjlsNC42LDIuMmMxLTEuNCwxLjktMi45LDIuNi00LjVMNzMsNTkuOGMwLjktMi4xLDEuNS00LjQsMS44LTYuN0w3OS45LDUyLjYgeiBNNTAsNjVjLTguMywwLTE1LTYuNy0xNS0xNWMwLTguMyw2LjctMTUsMTUtMTVzMTUsNi43LDE1LDE1QzY1LDU4LjMsNTguMyw2NSw1MCw2NXpcIiBmaWxsPVwiIzAwMDAwMFwiPlxyXG5cdFx0XHRcdDxhbmltYXRlVHJhbnNmb3JtXHJcblx0XHRcdFx0XHRhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCJcclxuXHRcdFx0XHRcdHR5cGU9XCJyb3RhdGVcIlxyXG5cdFx0XHRcdFx0ZnJvbT1cIjkwIDUwIDUwXCIgdG89XCIwIDUwIDUwXCIgZHVyPVwiMXNcIlxyXG5cdFx0XHRcdFx0cmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCJcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0PC9hbmltYXRlVHJhbnNmb3JtPlxyXG5cdFx0XHQ8L3BhdGg+XHJcblx0XHRcdDwvZz5cclxuXHRcdFx0PGcgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIwLDIwKSByb3RhdGUoMTUgNTAgNTApXCI+XHJcblx0XHRcdFx0PHBhdGggZD1cIk03OS45LDUyLjZDODAsNTEuOCw4MCw1MC45LDgwLDUwczAtMS44LTAuMS0yLjZsLTUuMS0wLjRjLTAuMy0yLjQtMC45LTQuNi0xLjgtNi43bDQuMi0yLjljLTAuNy0xLjYtMS42LTMuMS0yLjYtNC41IEw3MCwzNWMtMS40LTEuOS0zLjEtMy41LTQuOS00LjlsMi4yLTQuNmMtMS40LTEtMi45LTEuOS00LjUtMi42TDU5LjgsMjdjLTIuMS0wLjktNC40LTEuNS02LjctMS44bC0wLjQtNS4xQzUxLjgsMjAsNTAuOSwyMCw1MCwyMCBzLTEuOCwwLTIuNiwwLjFsLTAuNCw1LjFjLTIuNCwwLjMtNC42LDAuOS02LjcsMS44bC0yLjktNC4xYy0xLjYsMC43LTMuMSwxLjYtNC41LDIuNmwyLjEsNC42Yy0xLjksMS40LTMuNSwzLjEtNSw0LjlsLTQuNS0yLjEgYy0xLDEuNC0xLjksMi45LTIuNiw0LjVsNC4xLDIuOWMtMC45LDIuMS0xLjUsNC40LTEuOCw2LjhsLTUsMC40QzIwLDQ4LjIsMjAsNDkuMSwyMCw1MHMwLDEuOCwwLjEsMi42bDUsMC40IGMwLjMsMi40LDAuOSw0LjcsMS44LDYuOGwtNC4xLDIuOWMwLjcsMS42LDEuNiwzLjEsMi42LDQuNWw0LjUtMi4xYzEuNCwxLjksMy4xLDMuNSw1LDQuOWwtMi4xLDQuNmMxLjQsMSwyLjksMS45LDQuNSwyLjZsMi45LTQuMSBjMi4xLDAuOSw0LjQsMS41LDYuNywxLjhsMC40LDUuMUM0OC4yLDgwLDQ5LjEsODAsNTAsODBzMS44LDAsMi42LTAuMWwwLjQtNS4xYzIuMy0wLjMsNC42LTAuOSw2LjctMS44bDIuOSw0LjIgYzEuNi0wLjcsMy4xLTEuNiw0LjUtMi42TDY1LDY5LjljMS45LTEuNCwzLjUtMyw0LjktNC45bDQuNiwyLjJjMS0xLjQsMS45LTIuOSwyLjYtNC41TDczLDU5LjhjMC45LTIuMSwxLjUtNC40LDEuOC02LjdMNzkuOSw1Mi42IHogTTUwLDY1Yy04LjMsMC0xNS02LjctMTUtMTVjMC04LjMsNi43LTE1LDE1LTE1czE1LDYuNywxNSwxNUM2NSw1OC4zLDU4LjMsNjUsNTAsNjV6XCIgZmlsbD1cIiM5ZjlmYWJcIj5cclxuXHRcdFx0XHRcdDxhbmltYXRlVHJhbnNmb3JtXHJcblx0XHRcdFx0XHRcdGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIlxyXG5cdFx0XHRcdFx0XHR0eXBlPVwicm90YXRlXCIgZnJvbT1cIjAgNTAgNTBcIiB0bz1cIjkwIDUwIDUwXCIgZHVyPVwiMXNcIlxyXG5cdFx0XHRcdFx0XHRyZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIj5cclxuXHRcdFx0XHRcdDwvYW5pbWF0ZVRyYW5zZm9ybT5cclxuXHRcdFx0XHQ8L3BhdGg+XHJcblx0XHRcdDwvZz5cclxuXHRcdDwvc3ZnPlxyXG5cdDwvZGl2PlxyXG5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2xpZW50L2NvbXBvbmVudHMvdHJhbnNpdGlvbi5qc3giXSwic291cmNlUm9vdCI6IiJ9')},63:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reactDom = __webpack_require__(40);\n\nvar _reactRouter = __webpack_require__(16);\n\nvar _reactRouterTransition = __webpack_require__(86);\n\nvar _header = __webpack_require__(59);\n\nvar _header2 = _interopRequireDefault(_header);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import Home from './home'; // Load on demand\n// import Detail from './detail';\n// import List from './list';\n// import New from './new';\n\nif (true) module.hot.accept();\n\nvar styles = _reactRouterTransition.presets.slideLeft;\n\nvar App = function App(_ref) {\n  var children = _ref.children,\n      location = _ref.location;\n\n  styles = location.action === 'POP' ? _reactRouterTransition.presets.slideRight : _reactRouterTransition.presets.slideLeft;\n  return React.createElement(\n    'div',\n    null,\n    React.createElement(_header2.default, null),\n    React.createElement(\n      _reactRouterTransition.RouteTransition,\n      _extends({\n        className: 'transition-wrapper',\n        pathname: location.pathname,\n        runOnMount: false\n      }, styles),\n      children\n    )\n  );\n};\n\nvar rootRoute = {\n  path: '/',\n  component: App,\n  indexRoute: {\n    getComponent: function getComponent(nextState, callback) {\n      __webpack_require__.e/* nsure */(4, function (require) {\n        callback('', __webpack_require__(62).default);\n      });\n    }\n  },\n  childRoutes: [{\n    path: 'new',\n    getComponent: function getComponent(nextState, callback) {\n      $('#globalTransition').css('display', 'block');\n      __webpack_require__.e/* nsure */(3, function (require) {\n        callback(null, __webpack_require__(65).default);\n      });\n    }\n  }, {\n    path: 'list(/:name)',\n    getComponent: function getComponent(nextState, callback) {\n      $('#globalTransition').css('display', 'block');\n      __webpack_require__.e/* nsure */(2, function (require) {\n        callback(null, __webpack_require__(64).default);\n      });\n    }\n  }, {\n    path: 'detail(/:id)',\n    getComponent: function getComponent(nextState, callback) {\n      $('#globalTransition').css('display', 'block');\n      __webpack_require__.e/* nsure */(1, function (require) {\n        callback(null, __webpack_require__(61).default);\n      });\n    }\n  }]\n};\n\n(0, _reactDom.render)(React.createElement(_reactRouter.Router, {\n  key: Math.random(),\n  history: _reactRouter.browserHistory,\n  routes: rootRoute\n}), document.getElementById('app'));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvaW5kZXguanN4PzkzMTkiXSwibmFtZXMiOlsibW9kdWxlIiwiaG90IiwiYWNjZXB0Iiwic3R5bGVzIiwic2xpZGVMZWZ0IiwiQXBwIiwiY2hpbGRyZW4iLCJsb2NhdGlvbiIsImFjdGlvbiIsInNsaWRlUmlnaHQiLCJwYXRobmFtZSIsInJvb3RSb3V0ZSIsInBhdGgiLCJjb21wb25lbnQiLCJpbmRleFJvdXRlIiwiZ2V0Q29tcG9uZW50IiwibmV4dFN0YXRlIiwiY2FsbGJhY2siLCJyZXF1aXJlIiwiZGVmYXVsdCIsImNoaWxkUm91dGVzIiwiJCIsImNzcyIsIk1hdGgiLCJyYW5kb20iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBOztBQUNBOztBQUVBOztBQUVBOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQUosRUFBc0RBLE9BQU9DLEdBQVAsQ0FBV0MsTUFBWDs7QUFFdEQsSUFBSUMsU0FBUywrQkFBUUMsU0FBckI7O0FBRUEsSUFBTUMsTUFBTSxTQUFOQSxHQUFNLE9BQWlDO0FBQUEsTUFBdEJDLFFBQXNCLFFBQXRCQSxRQUFzQjtBQUFBLE1BQVpDLFFBQVksUUFBWkEsUUFBWTs7QUFDM0NKLFdBQVNJLFNBQVNDLE1BQVQsS0FBb0IsS0FBcEIsR0FBNEIsK0JBQVFDLFVBQXBDLEdBQWlELCtCQUFRTCxTQUFsRTtBQUNBLFNBQ0E7QUFBQTtBQUFBO0FBQ0UsK0NBREY7QUFFRTtBQUFBO0FBQUE7QUFDRSxtQkFBVSxvQkFEWjtBQUVFLGtCQUFVRyxTQUFTRyxRQUZyQjtBQUdFLG9CQUFZO0FBSGQsU0FJTVAsTUFKTjtBQU1HRztBQU5IO0FBRkYsR0FEQTtBQWFELENBZkQ7O0FBaUJBLElBQU1LLFlBQVk7QUFDaEJDLFFBQU0sR0FEVTtBQUVoQkMsYUFBV1IsR0FGSztBQUdoQlMsY0FBWTtBQUNWQyxnQkFEVSx3QkFDR0MsU0FESCxFQUNjQyxRQURkLEVBQ3VCO0FBQy9CQyxNQUFBLG9DQUFtQixtQkFBVztBQUM1QkQsaUJBQVMsRUFBVCxFQUFhLG1CQUFBQyxDQUFRLEVBQVIsRUFBZ0JDLE9BQTdCO0FBQ0QsT0FGRDtBQUdEO0FBTFMsR0FISTtBQVVoQkMsZUFBYSxDQUNYO0FBQ0VSLFVBQUssS0FEUDtBQUVFRyxnQkFGRix3QkFFZUMsU0FGZixFQUUwQkMsUUFGMUIsRUFFbUM7QUFDL0JJLFFBQUUsbUJBQUYsRUFBdUJDLEdBQXZCLENBQTJCLFNBQTNCLEVBQXNDLE9BQXRDO0FBQ0FKLE1BQUEsb0NBQW1CLG1CQUFXO0FBQzVCRCxpQkFBUyxJQUFULEVBQWUsbUJBQUFDLENBQVEsRUFBUixFQUFlQyxPQUE5QjtBQUNELE9BRkQ7QUFHQTtBQVBKLEdBRFcsRUFVWDtBQUNFUCxVQUFLLGNBRFA7QUFFRUcsZ0JBRkYsd0JBRWVDLFNBRmYsRUFFMEJDLFFBRjFCLEVBRW1DO0FBQy9CSSxRQUFFLG1CQUFGLEVBQXVCQyxHQUF2QixDQUEyQixTQUEzQixFQUFzQyxPQUF0QztBQUNBSixNQUFBLG9DQUFtQixtQkFBVztBQUM1QkQsaUJBQVMsSUFBVCxFQUFlLG1CQUFBQyxDQUFRLEVBQVIsRUFBZ0JDLE9BQS9CO0FBQ0QsT0FGRDtBQUdEO0FBUEgsR0FWVyxFQW1CWDtBQUNFUCxVQUFLLGNBRFA7QUFFRUcsZ0JBRkYsd0JBRWVDLFNBRmYsRUFFMEJDLFFBRjFCLEVBRW1DO0FBQy9CSSxRQUFFLG1CQUFGLEVBQXVCQyxHQUF2QixDQUEyQixTQUEzQixFQUFzQyxPQUF0QztBQUNBSixNQUFBLG9DQUFrQixtQkFBVztBQUMzQkQsaUJBQVMsSUFBVCxFQUFlLG1CQUFBQyxDQUFRLEVBQVIsRUFBa0JDLE9BQWpDO0FBQ0QsT0FGRDtBQUdEO0FBUEgsR0FuQlc7QUFWRyxDQUFsQjs7QUF5Q0Esc0JBQVE7QUFDRSxPQUFPSSxLQUFLQyxNQUFMLEVBRFQ7QUFFRSxzQ0FGRjtBQUdFLFVBQVViO0FBSFosRUFBUixFQU1LYyxTQUFTQyxjQUFULENBQXdCLEtBQXhCLENBTkwiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIGJyb3dzZXJIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuXHJcbmltcG9ydCB7IFJvdXRlVHJhbnNpdGlvbiwgcHJlc2V0cyB9IGZyb20gJ3JlYWN0LXJvdXRlci10cmFuc2l0aW9uJztcclxuXHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9jb21wb25lbnRzL2hlYWRlcic7XHJcblxyXG4vLyBpbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUnOyAvLyBMb2FkIG9uIGRlbWFuZFxyXG4vLyBpbXBvcnQgRGV0YWlsIGZyb20gJy4vZGV0YWlsJztcclxuLy8gaW1wb3J0IExpc3QgZnJvbSAnLi9saXN0JztcclxuLy8gaW1wb3J0IE5ldyBmcm9tICcuL25ldyc7XHJcblxyXG5pZiAobW9kdWxlLmhvdCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2Rldi1ITVInKSBtb2R1bGUuaG90LmFjY2VwdCgpO1xyXG5cclxudmFyIHN0eWxlcyA9IHByZXNldHMuc2xpZGVMZWZ0O1xyXG5cclxuY29uc3QgQXBwID0gZnVuY3Rpb24oeyBjaGlsZHJlbiwgbG9jYXRpb24gfSkge1xyXG4gIHN0eWxlcyA9IGxvY2F0aW9uLmFjdGlvbiA9PT0gJ1BPUCcgPyBwcmVzZXRzLnNsaWRlUmlnaHQgOiBwcmVzZXRzLnNsaWRlTGVmdDtcclxuICByZXR1cm4gKFxyXG4gIDxkaXY+XHJcbiAgICA8SGVhZGVyIC8+XHJcbiAgICA8Um91dGVUcmFuc2l0aW9uXHJcbiAgICAgIGNsYXNzTmFtZT1cInRyYW5zaXRpb24td3JhcHBlclwiXHJcbiAgICAgIHBhdGhuYW1lPXtsb2NhdGlvbi5wYXRobmFtZX1cclxuICAgICAgcnVuT25Nb3VudD17ZmFsc2V9XHJcbiAgICAgIHsuLi5zdHlsZXN9XHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvUm91dGVUcmFuc2l0aW9uPlxyXG4gIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCByb290Um91dGUgPSB7XHJcbiAgcGF0aDogJy8nLFxyXG4gIGNvbXBvbmVudDogQXBwLFxyXG4gIGluZGV4Um91dGU6IHtcclxuICAgIGdldENvbXBvbmVudChuZXh0U3RhdGUsIGNhbGxiYWNrKXtcclxuICAgICAgcmVxdWlyZS5lbnN1cmUoW10sIHJlcXVpcmUgPT4ge1xyXG4gICAgICAgIGNhbGxiYWNrKCcnLCByZXF1aXJlKCdob21lJykuZGVmYXVsdCk7XHJcbiAgICAgIH0sJ2hvbWUnKTtcclxuICAgIH1cclxuICB9LFxyXG4gIGNoaWxkUm91dGVzOiBbXHJcbiAgICB7XHJcbiAgICAgIHBhdGg6J25ldycsXHJcbiAgICAgIGdldENvbXBvbmVudChuZXh0U3RhdGUsIGNhbGxiYWNrKXtcclxuICAgICAgICAkKCcjZ2xvYmFsVHJhbnNpdGlvbicpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgIHJlcXVpcmUuZW5zdXJlKFtdLCByZXF1aXJlID0+IHtcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVpcmUoJ25ldycpLmRlZmF1bHQpO1xyXG4gICAgICAgIH0sICduZXcnKTtcclxuICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHBhdGg6J2xpc3QoLzpuYW1lKScsXHJcbiAgICAgIGdldENvbXBvbmVudChuZXh0U3RhdGUsIGNhbGxiYWNrKXtcclxuICAgICAgICAkKCcjZ2xvYmFsVHJhbnNpdGlvbicpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgIHJlcXVpcmUuZW5zdXJlKFtdLCByZXF1aXJlID0+IHtcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVpcmUoJ2xpc3QnKS5kZWZhdWx0KTtcclxuICAgICAgICB9LCAnbGlzdCcpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBwYXRoOidkZXRhaWwoLzppZCknLFxyXG4gICAgICBnZXRDb21wb25lbnQobmV4dFN0YXRlLCBjYWxsYmFjayl7XHJcbiAgICAgICAgJCgnI2dsb2JhbFRyYW5zaXRpb24nKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICByZXF1aXJlLmVuc3VyZShbXSxyZXF1aXJlID0+IHtcclxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVpcmUoJ2RldGFpbCcpLmRlZmF1bHQpO1xyXG4gICAgICAgIH0sICdkZXRhaWwnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuXHJcbnJlbmRlcigoPFJvdXRlclxyXG4gICAgICAgICAga2V5ID0ge01hdGgucmFuZG9tKCl9XHJcbiAgICAgICAgICBoaXN0b3J5ID0ge2Jyb3dzZXJIaXN0b3J5fVxyXG4gICAgICAgICAgcm91dGVzID0ge3Jvb3RSb3V0ZX1cclxuICAgICAgICA+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXHJcbik7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NsaWVudC9pbmRleC5qc3giXSwic291cmNlUm9vdCI6IiJ9")},86:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory(__webpack_require__(1));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports[\"ReactRouterTransition\"] = factory(require(\"react\"));else root[\"ReactRouterTransition\"] = factory(root[\"React\"]);\n})(undefined, function (__WEBPACK_EXTERNAL_MODULE_2__) {\n\treturn (/******/function (modules) {\n\t\t\t// webpackBootstrap\n\t\t\t/******/ // The module cache\n\t\t\t/******/var installedModules = {};\n\t\t\t/******/\n\t\t\t/******/ // The require function\n\t\t\t/******/function __webpack_require__(moduleId) {\n\t\t\t\t/******/\n\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t/******/if (installedModules[moduleId])\n\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\t\t\t\t/******/\n\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t/******/exports: {},\n\t\t\t\t\t/******/id: moduleId,\n\t\t\t\t\t/******/loaded: false\n\t\t\t\t\t/******/ };\n\t\t\t\t/******/\n\t\t\t\t/******/ // Execute the module function\n\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\t\t\t/******/\n\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t/******/module.loaded = true;\n\t\t\t\t/******/\n\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t/******/return module.exports;\n\t\t\t\t/******/\n\t\t\t}\n\t\t\t/******/\n\t\t\t/******/\n\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t/******/__webpack_require__.m = modules;\n\t\t\t/******/\n\t\t\t/******/ // expose the module cache\n\t\t\t/******/__webpack_require__.c = installedModules;\n\t\t\t/******/\n\t\t\t/******/ // __webpack_public_path__\n\t\t\t/******/__webpack_require__.p = \"\";\n\t\t\t/******/\n\t\t\t/******/ // Load entry module and return exports\n\t\t\t/******/return __webpack_require__(0);\n\t\t\t/******/\n\t\t}(\n\t\t/************************************************************************/\n\t\t/******/[\n\t\t/* 0 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _RouteTransition = __webpack_require__(1);\n\n\t\t\tObject.defineProperty(exports, 'RouteTransition', {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function get() {\n\t\t\t\t\treturn _interopRequireDefault(_RouteTransition).default;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar _presets = __webpack_require__(19);\n\n\t\t\tObject.defineProperty(exports, 'presets', {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function get() {\n\t\t\t\t\treturn _interopRequireDefault(_presets).default;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 1 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _react = __webpack_require__(2);\n\n\t\t\tvar _react2 = _interopRequireDefault(_react);\n\n\t\t\tvar _reactMotion = __webpack_require__(3);\n\n\t\t\tvar _ensureSpring = __webpack_require__(18);\n\n\t\t\tvar _ensureSpring2 = _interopRequireDefault(_ensureSpring);\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { default: obj };\n\t\t\t}\n\n\t\t\tvar RouteTransition = _react2.default.createClass({\n\t\t\t\tdisplayName: 'RouteTransition',\n\n\t\t\t\tpropTypes: {\n\t\t\t\t\tclassName: _react.PropTypes.string,\n\t\t\t\t\tcomponent: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.bool]),\n\t\t\t\t\tpathname: _react.PropTypes.string.isRequired,\n\t\t\t\t\tatEnter: _react.PropTypes.object.isRequired,\n\t\t\t\t\tatActive: _react.PropTypes.object.isRequired,\n\t\t\t\t\tatLeave: _react.PropTypes.object.isRequired,\n\t\t\t\t\tmapStyles: _react.PropTypes.func,\n\t\t\t\t\trunOnMount: _react.PropTypes.bool,\n\t\t\t\t\tstyle: _react.PropTypes.object\n\t\t\t\t},\n\n\t\t\t\tgetDefaultProps: function getDefaultProps() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcomponent: 'div',\n\t\t\t\t\t\trunOnMount: true,\n\t\t\t\t\t\tmapStyles: function mapStyles(val) {\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetDefaultStyles: function getDefaultStyles() {\n\t\t\t\t\tif (!this.props.runOnMount) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.props.children) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tkey: this.props.pathname,\n\t\t\t\t\t\tdata: this.props.children,\n\t\t\t\t\t\tstyle: this.props.atEnter\n\t\t\t\t\t}];\n\t\t\t\t},\n\n\t\t\t\t// there's only ever one route mounted at a time,\n\t\t\t\t// so just return the current match\n\t\t\t\tgetStyles: function getStyles() {\n\t\t\t\t\tif (!this.props.children) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO: maybe access route path from children for pathname?\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tkey: this.props.pathname,\n\t\t\t\t\t\tdata: this.props.children,\n\t\t\t\t\t\tstyle: (0, _ensureSpring2.default)(this.props.atActive)\n\t\t\t\t\t}];\n\t\t\t\t},\n\t\t\t\twillEnter: function willEnter() {\n\t\t\t\t\treturn this.props.atEnter;\n\t\t\t\t},\n\t\t\t\twillLeave: function willLeave() {\n\t\t\t\t\treturn (0, _ensureSpring2.default)(this.props.atLeave);\n\t\t\t\t},\n\t\t\t\trenderRoute: function renderRoute(config) {\n\t\t\t\t\tvar props = {\n\t\t\t\t\t\tstyle: this.props.mapStyles(config.style),\n\t\t\t\t\t\tkey: config.key\n\t\t\t\t\t};\n\n\t\t\t\t\treturn this.props.component ? (0, _react.createElement)(this.props.component, props, config.data) : (0, _react.cloneElement)(config.data, props);\n\t\t\t\t},\n\t\t\t\trenderRoutes: function renderRoutes(interpolatedStyles) {\n\t\t\t\t\treturn _react2.default.createElement('div', { className: this.props.className, style: this.props.style }, interpolatedStyles.map(this.renderRoute));\n\t\t\t\t},\n\t\t\t\trender: function render() {\n\t\t\t\t\treturn _react2.default.createElement(_reactMotion.TransitionMotion, {\n\t\t\t\t\t\tdefaultStyles: this.getDefaultStyles(),\n\t\t\t\t\t\tstyles: this.getStyles(),\n\t\t\t\t\t\twillEnter: this.willEnter,\n\t\t\t\t\t\twillLeave: this.willLeave\n\t\t\t\t\t}, this.renderRoutes);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texports.default = RouteTransition;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 2 */\n\t\t/***/function (module, exports) {\n\n\t\t\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 3 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\n\t\t\tfunction _interopRequire(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj['default'] : obj;\n\t\t\t}\n\n\t\t\tvar _Motion = __webpack_require__(4);\n\n\t\t\texports.Motion = _interopRequire(_Motion);\n\n\t\t\tvar _StaggeredMotion = __webpack_require__(12);\n\n\t\t\texports.StaggeredMotion = _interopRequire(_StaggeredMotion);\n\n\t\t\tvar _TransitionMotion = __webpack_require__(13);\n\n\t\t\texports.TransitionMotion = _interopRequire(_TransitionMotion);\n\n\t\t\tvar _spring = __webpack_require__(15);\n\n\t\t\texports.spring = _interopRequire(_spring);\n\n\t\t\tvar _presets = __webpack_require__(16);\n\n\t\t\texports.presets = _interopRequire(_presets);\n\n\t\t\t// deprecated, dummy warning function\n\n\t\t\tvar _reorderKeys = __webpack_require__(17);\n\n\t\t\texports.reorderKeys = _interopRequire(_reorderKeys);\n\n\t\t\t/***/\n\t\t},\n\t\t/* 4 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\n\t\t\tvar _extends = Object.assign || function (target) {\n\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\tvar source = arguments[i];for (var key in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\t\t\t\t\ttarget[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}return target;\n\t\t\t};\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { 'default': obj };\n\t\t\t}\n\n\t\t\tvar _mapToZero = __webpack_require__(5);\n\n\t\t\tvar _mapToZero2 = _interopRequireDefault(_mapToZero);\n\n\t\t\tvar _stripStyle = __webpack_require__(6);\n\n\t\t\tvar _stripStyle2 = _interopRequireDefault(_stripStyle);\n\n\t\t\tvar _stepper3 = __webpack_require__(7);\n\n\t\t\tvar _stepper4 = _interopRequireDefault(_stepper3);\n\n\t\t\tvar _performanceNow = __webpack_require__(8);\n\n\t\t\tvar _performanceNow2 = _interopRequireDefault(_performanceNow);\n\n\t\t\tvar _raf = __webpack_require__(10);\n\n\t\t\tvar _raf2 = _interopRequireDefault(_raf);\n\n\t\t\tvar _shouldStopAnimation = __webpack_require__(11);\n\n\t\t\tvar _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);\n\n\t\t\tvar _react = __webpack_require__(2);\n\n\t\t\tvar _react2 = _interopRequireDefault(_react);\n\n\t\t\tvar msPerFrame = 1000 / 60;\n\n\t\t\tvar Motion = _react2['default'].createClass({\n\t\t\t\tdisplayName: 'Motion',\n\n\t\t\t\tpropTypes: {\n\t\t\t\t\t// TOOD: warn against putting a config in here\n\t\t\t\t\tdefaultStyle: _react.PropTypes.objectOf(_react.PropTypes.number),\n\t\t\t\t\tstyle: _react.PropTypes.objectOf(_react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object])).isRequired,\n\t\t\t\t\tchildren: _react.PropTypes.func.isRequired,\n\t\t\t\t\tonRest: _react.PropTypes.func\n\t\t\t\t},\n\n\t\t\t\tgetInitialState: function getInitialState() {\n\t\t\t\t\tvar _props = this.props;\n\t\t\t\t\tvar defaultStyle = _props.defaultStyle;\n\t\t\t\t\tvar style = _props.style;\n\n\t\t\t\t\tvar currentStyle = defaultStyle || _stripStyle2['default'](style);\n\t\t\t\t\tvar currentVelocity = _mapToZero2['default'](currentStyle);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcurrentStyle: currentStyle,\n\t\t\t\t\t\tcurrentVelocity: currentVelocity,\n\t\t\t\t\t\tlastIdealStyle: currentStyle,\n\t\t\t\t\t\tlastIdealVelocity: currentVelocity\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\twasAnimating: false,\n\t\t\t\tanimationID: null,\n\t\t\t\tprevTime: 0,\n\t\t\t\taccumulatedTime: 0,\n\t\t\t\t// it's possible that currentStyle's value is stale: if props is immediately\n\t\t\t\t// changed from 0 to 400 to spring(0) again, the async currentStyle is still\n\t\t\t\t// at 0 (didn't have time to tick and interpolate even once). If we naively\n\t\t\t\t// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n\t\t\t\t// In reality currentStyle should be 400\n\t\t\t\tunreadPropStyle: null,\n\t\t\t\t// after checking for unreadPropStyle != null, we manually go set the\n\t\t\t\t// non-interpolating values (those that are a number, without a spring\n\t\t\t\t// config)\n\t\t\t\tclearUnreadPropStyle: function clearUnreadPropStyle(destStyle) {\n\t\t\t\t\tvar dirty = false;\n\t\t\t\t\tvar _state = this.state;\n\t\t\t\t\tvar currentStyle = _state.currentStyle;\n\t\t\t\t\tvar currentVelocity = _state.currentVelocity;\n\t\t\t\t\tvar lastIdealStyle = _state.lastIdealStyle;\n\t\t\t\t\tvar lastIdealVelocity = _state.lastIdealVelocity;\n\n\t\t\t\t\tfor (var key in destStyle) {\n\t\t\t\t\t\tif (!destStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar styleValue = destStyle[key];\n\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\tif (!dirty) {\n\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\tcurrentStyle = _extends({}, currentStyle);\n\t\t\t\t\t\t\t\tcurrentVelocity = _extends({}, currentVelocity);\n\t\t\t\t\t\t\t\tlastIdealStyle = _extends({}, lastIdealStyle);\n\t\t\t\t\t\t\t\tlastIdealVelocity = _extends({}, lastIdealVelocity);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentStyle[key] = styleValue;\n\t\t\t\t\t\t\tcurrentVelocity[key] = 0;\n\t\t\t\t\t\t\tlastIdealStyle[key] = styleValue;\n\t\t\t\t\t\t\tlastIdealVelocity[key] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dirty) {\n\t\t\t\t\t\tthis.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tstartAnimationIfNecessary: function startAnimationIfNecessary() {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t// TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n\t\t\t\t\t// call cb? No, otherwise accidental parent rerender causes cb trigger\n\t\t\t\t\tthis.animationID = _raf2['default'](function () {\n\t\t\t\t\t\t// check if we need to animate in the first place\n\t\t\t\t\t\tvar propsStyle = _this.props.style;\n\t\t\t\t\t\tif (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {\n\t\t\t\t\t\t\tif (_this.wasAnimating && _this.props.onRest) {\n\t\t\t\t\t\t\t\t_this.props.onRest();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.wasAnimating = false;\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this.wasAnimating = true;\n\n\t\t\t\t\t\tvar currentTime = _performanceNow2['default']();\n\t\t\t\t\t\tvar timeDelta = currentTime - _this.prevTime;\n\t\t\t\t\t\t_this.prevTime = currentTime;\n\t\t\t\t\t\t_this.accumulatedTime = _this.accumulatedTime + timeDelta;\n\t\t\t\t\t\t// more than 10 frames? prolly switched browser tab. Restart\n\t\t\t\t\t\tif (_this.accumulatedTime > msPerFrame * 10) {\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_this.accumulatedTime === 0) {\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n\t\t\t\t\t\tvar framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n\n\t\t\t\t\t\tvar newLastIdealStyle = {};\n\t\t\t\t\t\tvar newLastIdealVelocity = {};\n\t\t\t\t\t\tvar newCurrentStyle = {};\n\t\t\t\t\t\tvar newCurrentVelocity = {};\n\n\t\t\t\t\t\tfor (var key in propsStyle) {\n\t\t\t\t\t\t\tif (!propsStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar styleValue = propsStyle[key];\n\t\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\t\tnewCurrentStyle[key] = styleValue;\n\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = 0;\n\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = styleValue;\n\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar newLastIdealStyleValue = _this.state.lastIdealStyle[key];\n\t\t\t\t\t\t\t\tvar newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];\n\t\t\t\t\t\t\t\tfor (var i = 0; i < framesToCatchUp; i++) {\n\t\t\t\t\t\t\t\t\tvar _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\t\tnewLastIdealStyleValue = _stepper[0];\n\t\t\t\t\t\t\t\t\tnewLastIdealVelocityValue = _stepper[1];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\tvar nextIdealX = _stepper2[0];\n\t\t\t\t\t\t\t\tvar nextIdealV = _stepper2[1];\n\n\t\t\t\t\t\t\t\tnewCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = newLastIdealStyleValue;\n\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = newLastIdealVelocityValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t// the amount we're looped over above\n\t\t\t\t\t\t_this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n\t\t\t\t\t\t_this.setState({\n\t\t\t\t\t\t\tcurrentStyle: newCurrentStyle,\n\t\t\t\t\t\t\tcurrentVelocity: newCurrentVelocity,\n\t\t\t\t\t\t\tlastIdealStyle: newLastIdealStyle,\n\t\t\t\t\t\t\tlastIdealVelocity: newLastIdealVelocity\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t_this.unreadPropStyle = null;\n\n\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tcomponentDidMount: function componentDidMount() {\n\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t},\n\n\t\t\t\tcomponentWillReceiveProps: function componentWillReceiveProps(props) {\n\t\t\t\t\tif (this.unreadPropStyle != null) {\n\t\t\t\t\t\t// previous props haven't had the chance to be set yet; set them here\n\t\t\t\t\t\tthis.clearUnreadPropStyle(this.unreadPropStyle);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.unreadPropStyle = props.style;\n\t\t\t\t\tif (this.animationID == null) {\n\t\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tcomponentWillUnmount: function componentWillUnmount() {\n\t\t\t\t\tif (this.animationID != null) {\n\t\t\t\t\t\t_raf2['default'].cancel(this.animationID);\n\t\t\t\t\t\tthis.animationID = null;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trender: function render() {\n\t\t\t\t\tvar renderedChildren = this.props.children(this.state.currentStyle);\n\t\t\t\t\treturn renderedChildren && _react2['default'].Children.only(renderedChildren);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texports['default'] = Motion;\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 5 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// currently used to initiate the velocity style object to 0\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\t\t\texports['default'] = mapToZero;\n\n\t\t\tfunction mapToZero(obj) {\n\t\t\t\tvar ret = {};\n\t\t\t\tfor (var key in obj) {\n\t\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\t\tret[key] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 6 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by\n\t\t\t// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\t\t\texports['default'] = stripStyle;\n\n\t\t\tfunction stripStyle(style) {\n\t\t\t\tvar ret = {};\n\t\t\t\tfor (var key in style) {\n\t\t\t\t\tif (!style.hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 7 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// stepper is used a lot. Saves allocation to return the same array wrapper.\n\t\t\t// This is fine and danger-free against mutations because the callsite\n\t\t\t// immediately destructures it and gets the numbers inside without passing the\n\t\t\t\"use strict\";\n\n\t\t\texports.__esModule = true;\n\t\t\texports[\"default\"] = stepper;\n\n\t\t\tvar reusedTuple = [];\n\n\t\t\tfunction stepper(secondPerFrame, x, v, destX, k, b, precision) {\n\t\t\t\t// Spring stiffness, in kg / s^2\n\n\t\t\t\t// for animations, destX is really spring length (spring at rest). initial\n\t\t\t\t// position is considered as the stretched/compressed position of a spring\n\t\t\t\tvar Fspring = -k * (x - destX);\n\n\t\t\t\t// Damping, in kg / s\n\t\t\t\tvar Fdamper = -b * v;\n\n\t\t\t\t// usually we put mass here, but for animation purposes, specifying mass is a\n\t\t\t\t// bit redundant. you could simply adjust k and b accordingly\n\t\t\t\t// let a = (Fspring + Fdamper) / mass;\n\t\t\t\tvar a = Fspring + Fdamper;\n\n\t\t\t\tvar newV = v + a * secondPerFrame;\n\t\t\t\tvar newX = x + newV * secondPerFrame;\n\n\t\t\t\tif (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {\n\t\t\t\t\treusedTuple[0] = destX;\n\t\t\t\t\treusedTuple[1] = 0;\n\t\t\t\t\treturn reusedTuple;\n\t\t\t\t}\n\n\t\t\t\treusedTuple[0] = newX;\n\t\t\t\treusedTuple[1] = newV;\n\t\t\t\treturn reusedTuple;\n\t\t\t}\n\n\t\t\tmodule.exports = exports[\"default\"];\n\t\t\t// array reference around.\n\n\t\t\t/***/\n\t\t},\n\t\t/* 8 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t/* WEBPACK VAR INJECTION */(function (process) {\n\t\t\t\t// Generated by CoffeeScript 1.7.1\n\t\t\t\t(function () {\n\t\t\t\t\tvar getNanoSeconds, hrtime, loadTime;\n\n\t\t\t\t\tif (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n\t\t\t\t\t\tmodule.exports = function () {\n\t\t\t\t\t\t\treturn performance.now();\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n\t\t\t\t\t\tmodule.exports = function () {\n\t\t\t\t\t\t\treturn (getNanoSeconds() - loadTime) / 1e6;\n\t\t\t\t\t\t};\n\t\t\t\t\t\thrtime = process.hrtime;\n\t\t\t\t\t\tgetNanoSeconds = function getNanoSeconds() {\n\t\t\t\t\t\t\tvar hr;\n\t\t\t\t\t\t\thr = hrtime();\n\t\t\t\t\t\t\treturn hr[0] * 1e9 + hr[1];\n\t\t\t\t\t\t};\n\t\t\t\t\t\tloadTime = getNanoSeconds();\n\t\t\t\t\t} else if (Date.now) {\n\t\t\t\t\t\tmodule.exports = function () {\n\t\t\t\t\t\t\treturn Date.now() - loadTime;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tloadTime = Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodule.exports = function () {\n\t\t\t\t\t\t\treturn new Date().getTime() - loadTime;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tloadTime = new Date().getTime();\n\t\t\t\t\t}\n\t\t\t\t}).call(this);\n\n\t\t\t\t/* WEBPACK VAR INJECTION */\n\t\t\t}).call(exports, __webpack_require__(9));\n\n\t\t\t/***/\n\t\t},\n\t\t/* 9 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// shim for using process in browser\n\n\t\t\tvar process = module.exports = {};\n\t\t\tvar queue = [];\n\t\t\tvar draining = false;\n\t\t\tvar currentQueue;\n\t\t\tvar queueIndex = -1;\n\n\t\t\tfunction cleanUpNextTick() {\n\t\t\t\tdraining = false;\n\t\t\t\tif (currentQueue.length) {\n\t\t\t\t\tqueue = currentQueue.concat(queue);\n\t\t\t\t} else {\n\t\t\t\t\tqueueIndex = -1;\n\t\t\t\t}\n\t\t\t\tif (queue.length) {\n\t\t\t\t\tdrainQueue();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction drainQueue() {\n\t\t\t\tif (draining) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar timeout = setTimeout(cleanUpNextTick);\n\t\t\t\tdraining = true;\n\n\t\t\t\tvar len = queue.length;\n\t\t\t\twhile (len) {\n\t\t\t\t\tcurrentQueue = queue;\n\t\t\t\t\tqueue = [];\n\t\t\t\t\twhile (++queueIndex < len) {\n\t\t\t\t\t\tif (currentQueue) {\n\t\t\t\t\t\t\tcurrentQueue[queueIndex].run();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tqueueIndex = -1;\n\t\t\t\t\tlen = queue.length;\n\t\t\t\t}\n\t\t\t\tcurrentQueue = null;\n\t\t\t\tdraining = false;\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\tprocess.nextTick = function (fun) {\n\t\t\t\tvar args = new Array(arguments.length - 1);\n\t\t\t\tif (arguments.length > 1) {\n\t\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tqueue.push(new Item(fun, args));\n\t\t\t\tif (queue.length === 1 && !draining) {\n\t\t\t\t\tsetTimeout(drainQueue, 0);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// v8 likes predictible objects\n\t\t\tfunction Item(fun, array) {\n\t\t\t\tthis.fun = fun;\n\t\t\t\tthis.array = array;\n\t\t\t}\n\t\t\tItem.prototype.run = function () {\n\t\t\t\tthis.fun.apply(null, this.array);\n\t\t\t};\n\t\t\tprocess.title = 'browser';\n\t\t\tprocess.browser = true;\n\t\t\tprocess.env = {};\n\t\t\tprocess.argv = [];\n\t\t\tprocess.version = ''; // empty string to avoid regexp issues\n\t\t\tprocess.versions = {};\n\n\t\t\tfunction noop() {}\n\n\t\t\tprocess.on = noop;\n\t\t\tprocess.addListener = noop;\n\t\t\tprocess.once = noop;\n\t\t\tprocess.off = noop;\n\t\t\tprocess.removeListener = noop;\n\t\t\tprocess.removeAllListeners = noop;\n\t\t\tprocess.emit = noop;\n\n\t\t\tprocess.binding = function (name) {\n\t\t\t\tthrow new Error('process.binding is not supported');\n\t\t\t};\n\n\t\t\tprocess.cwd = function () {\n\t\t\t\treturn '/';\n\t\t\t};\n\t\t\tprocess.chdir = function (dir) {\n\t\t\t\tthrow new Error('process.chdir is not supported');\n\t\t\t};\n\t\t\tprocess.umask = function () {\n\t\t\t\treturn 0;\n\t\t\t};\n\n\t\t\t/***/\n\t\t},\n\t\t/* 10 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\tvar now = __webpack_require__(8),\n\t\t\t    global = typeof window === 'undefined' ? {} : window,\n\t\t\t    vendors = ['moz', 'webkit'],\n\t\t\t    suffix = 'AnimationFrame',\n\t\t\t    raf = global['request' + suffix],\n\t\t\t    caf = global['cancel' + suffix] || global['cancelRequest' + suffix];\n\n\t\t\tfor (var i = 0; i < vendors.length && !raf; i++) {\n\t\t\t\traf = global[vendors[i] + 'Request' + suffix];\n\t\t\t\tcaf = global[vendors[i] + 'Cancel' + suffix] || global[vendors[i] + 'CancelRequest' + suffix];\n\t\t\t}\n\n\t\t\t// Some versions of FF have rAF but not cAF\n\t\t\tif (!raf || !caf) {\n\t\t\t\tvar last = 0,\n\t\t\t\t    id = 0,\n\t\t\t\t    queue = [],\n\t\t\t\t    frameDuration = 1000 / 60;\n\n\t\t\t\traf = function raf(callback) {\n\t\t\t\t\tif (queue.length === 0) {\n\t\t\t\t\t\tvar _now = now(),\n\t\t\t\t\t\t    next = Math.max(0, frameDuration - (_now - last));\n\t\t\t\t\t\tlast = next + _now;\n\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\tvar cp = queue.slice(0);\n\t\t\t\t\t\t\t// Clear queue here to prevent\n\t\t\t\t\t\t\t// callbacks from appending listeners\n\t\t\t\t\t\t\t// to the current frame's queue\n\t\t\t\t\t\t\tqueue.length = 0;\n\t\t\t\t\t\t\tfor (var i = 0; i < cp.length; i++) {\n\t\t\t\t\t\t\t\tif (!cp[i].cancelled) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tcp[i].callback(last);\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, Math.round(next));\n\t\t\t\t\t}\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\thandle: ++id,\n\t\t\t\t\t\tcallback: callback,\n\t\t\t\t\t\tcancelled: false\n\t\t\t\t\t});\n\t\t\t\t\treturn id;\n\t\t\t\t};\n\n\t\t\t\tcaf = function caf(handle) {\n\t\t\t\t\tfor (var i = 0; i < queue.length; i++) {\n\t\t\t\t\t\tif (queue[i].handle === handle) {\n\t\t\t\t\t\t\tqueue[i].cancelled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tmodule.exports = function (fn) {\n\t\t\t\t// Wrap in a new function to prevent\n\t\t\t\t// `cancel` potentially being assigned\n\t\t\t\t// to the native rAF function\n\t\t\t\treturn raf.call(global, fn);\n\t\t\t};\n\t\t\tmodule.exports.cancel = function () {\n\t\t\t\tcaf.apply(global, arguments);\n\t\t\t};\n\n\t\t\t/***/\n\t\t},\n\t\t/* 11 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// usage assumption: currentStyle values have already been rendered but it says\n\t\t\t// nothing of whether currentStyle is stale (see unreadPropStyle)\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\t\t\texports['default'] = shouldStopAnimation;\n\n\t\t\tfunction shouldStopAnimation(currentStyle, style, currentVelocity) {\n\t\t\t\tfor (var key in style) {\n\t\t\t\t\tif (!style.hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (currentVelocity[key] !== 0) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;\n\t\t\t\t\t// stepper will have already taken care of rounding precision errors, so\n\t\t\t\t\t// won't have such thing as 0.9999 !=== 1\n\t\t\t\t\tif (currentStyle[key] !== styleValue) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 12 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\n\t\t\tvar _extends = Object.assign || function (target) {\n\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\tvar source = arguments[i];for (var key in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\t\t\t\t\ttarget[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}return target;\n\t\t\t};\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { 'default': obj };\n\t\t\t}\n\n\t\t\tvar _mapToZero = __webpack_require__(5);\n\n\t\t\tvar _mapToZero2 = _interopRequireDefault(_mapToZero);\n\n\t\t\tvar _stripStyle = __webpack_require__(6);\n\n\t\t\tvar _stripStyle2 = _interopRequireDefault(_stripStyle);\n\n\t\t\tvar _stepper3 = __webpack_require__(7);\n\n\t\t\tvar _stepper4 = _interopRequireDefault(_stepper3);\n\n\t\t\tvar _performanceNow = __webpack_require__(8);\n\n\t\t\tvar _performanceNow2 = _interopRequireDefault(_performanceNow);\n\n\t\t\tvar _raf = __webpack_require__(10);\n\n\t\t\tvar _raf2 = _interopRequireDefault(_raf);\n\n\t\t\tvar _shouldStopAnimation = __webpack_require__(11);\n\n\t\t\tvar _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);\n\n\t\t\tvar _react = __webpack_require__(2);\n\n\t\t\tvar _react2 = _interopRequireDefault(_react);\n\n\t\t\tvar msPerFrame = 1000 / 60;\n\n\t\t\tfunction shouldStopAnimationAll(currentStyles, styles, currentVelocities) {\n\t\t\t\tfor (var i = 0; i < currentStyles.length; i++) {\n\t\t\t\t\tif (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar StaggeredMotion = _react2['default'].createClass({\n\t\t\t\tdisplayName: 'StaggeredMotion',\n\n\t\t\t\tpropTypes: {\n\t\t\t\t\t// TOOD: warn against putting a config in here\n\t\t\t\t\tdefaultStyles: _react.PropTypes.arrayOf(_react.PropTypes.objectOf(_react.PropTypes.number)),\n\t\t\t\t\tstyles: _react.PropTypes.func.isRequired,\n\t\t\t\t\tchildren: _react.PropTypes.func.isRequired\n\t\t\t\t},\n\n\t\t\t\tgetInitialState: function getInitialState() {\n\t\t\t\t\tvar _props = this.props;\n\t\t\t\t\tvar defaultStyles = _props.defaultStyles;\n\t\t\t\t\tvar styles = _props.styles;\n\n\t\t\t\t\tvar currentStyles = defaultStyles || styles().map(_stripStyle2['default']);\n\t\t\t\t\tvar currentVelocities = currentStyles.map(function (currentStyle) {\n\t\t\t\t\t\treturn _mapToZero2['default'](currentStyle);\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcurrentStyles: currentStyles,\n\t\t\t\t\t\tcurrentVelocities: currentVelocities,\n\t\t\t\t\t\tlastIdealStyles: currentStyles,\n\t\t\t\t\t\tlastIdealVelocities: currentVelocities\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tanimationID: null,\n\t\t\t\tprevTime: 0,\n\t\t\t\taccumulatedTime: 0,\n\t\t\t\t// it's possible that currentStyle's value is stale: if props is immediately\n\t\t\t\t// changed from 0 to 400 to spring(0) again, the async currentStyle is still\n\t\t\t\t// at 0 (didn't have time to tick and interpolate even once). If we naively\n\t\t\t\t// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n\t\t\t\t// In reality currentStyle should be 400\n\t\t\t\tunreadPropStyles: null,\n\t\t\t\t// after checking for unreadPropStyles != null, we manually go set the\n\t\t\t\t// non-interpolating values (those that are a number, without a spring\n\t\t\t\t// config)\n\t\t\t\tclearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {\n\t\t\t\t\tvar _state = this.state;\n\t\t\t\t\tvar currentStyles = _state.currentStyles;\n\t\t\t\t\tvar currentVelocities = _state.currentVelocities;\n\t\t\t\t\tvar lastIdealStyles = _state.lastIdealStyles;\n\t\t\t\t\tvar lastIdealVelocities = _state.lastIdealVelocities;\n\n\t\t\t\t\tvar someDirty = false;\n\t\t\t\t\tfor (var i = 0; i < unreadPropStyles.length; i++) {\n\t\t\t\t\t\tvar unreadPropStyle = unreadPropStyles[i];\n\t\t\t\t\t\tvar dirty = false;\n\n\t\t\t\t\t\tfor (var key in unreadPropStyle) {\n\t\t\t\t\t\t\tif (!unreadPropStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar styleValue = unreadPropStyle[key];\n\t\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\t\tif (!dirty) {\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t\tsomeDirty = true;\n\t\t\t\t\t\t\t\t\tcurrentStyles[i] = _extends({}, currentStyles[i]);\n\t\t\t\t\t\t\t\t\tcurrentVelocities[i] = _extends({}, currentVelocities[i]);\n\t\t\t\t\t\t\t\t\tlastIdealStyles[i] = _extends({}, lastIdealStyles[i]);\n\t\t\t\t\t\t\t\t\tlastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcurrentStyles[i][key] = styleValue;\n\t\t\t\t\t\t\t\tcurrentVelocities[i][key] = 0;\n\t\t\t\t\t\t\t\tlastIdealStyles[i][key] = styleValue;\n\t\t\t\t\t\t\t\tlastIdealVelocities[i][key] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (someDirty) {\n\t\t\t\t\t\tthis.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tstartAnimationIfNecessary: function startAnimationIfNecessary() {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t// TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n\t\t\t\t\t// call cb? No, otherwise accidental parent rerender causes cb trigger\n\t\t\t\t\tthis.animationID = _raf2['default'](function () {\n\t\t\t\t\t\tvar destStyles = _this.props.styles(_this.state.lastIdealStyles);\n\n\t\t\t\t\t\t// check if we need to animate in the first place\n\t\t\t\t\t\tif (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar currentTime = _performanceNow2['default']();\n\t\t\t\t\t\tvar timeDelta = currentTime - _this.prevTime;\n\t\t\t\t\t\t_this.prevTime = currentTime;\n\t\t\t\t\t\t_this.accumulatedTime = _this.accumulatedTime + timeDelta;\n\t\t\t\t\t\t// more than 10 frames? prolly switched browser tab. Restart\n\t\t\t\t\t\tif (_this.accumulatedTime > msPerFrame * 10) {\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_this.accumulatedTime === 0) {\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n\t\t\t\t\t\tvar framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n\n\t\t\t\t\t\tvar newLastIdealStyles = [];\n\t\t\t\t\t\tvar newLastIdealVelocities = [];\n\t\t\t\t\t\tvar newCurrentStyles = [];\n\t\t\t\t\t\tvar newCurrentVelocities = [];\n\n\t\t\t\t\t\tfor (var i = 0; i < destStyles.length; i++) {\n\t\t\t\t\t\t\tvar destStyle = destStyles[i];\n\t\t\t\t\t\t\tvar newCurrentStyle = {};\n\t\t\t\t\t\t\tvar newCurrentVelocity = {};\n\t\t\t\t\t\t\tvar newLastIdealStyle = {};\n\t\t\t\t\t\t\tvar newLastIdealVelocity = {};\n\n\t\t\t\t\t\t\tfor (var key in destStyle) {\n\t\t\t\t\t\t\t\tif (!destStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar styleValue = destStyle[key];\n\t\t\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\t\t\tnewCurrentStyle[key] = styleValue;\n\t\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = 0;\n\t\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = styleValue;\n\t\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];\n\t\t\t\t\t\t\t\t\tvar newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < framesToCatchUp; j++) {\n\t\t\t\t\t\t\t\t\t\tvar _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\t\t\tnewLastIdealStyleValue = _stepper[0];\n\t\t\t\t\t\t\t\t\t\tnewLastIdealVelocityValue = _stepper[1];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\t\tvar nextIdealX = _stepper2[0];\n\t\t\t\t\t\t\t\t\tvar nextIdealV = _stepper2[1];\n\n\t\t\t\t\t\t\t\t\tnewCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = newLastIdealStyleValue;\n\t\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = newLastIdealVelocityValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnewCurrentStyles[i] = newCurrentStyle;\n\t\t\t\t\t\t\tnewCurrentVelocities[i] = newCurrentVelocity;\n\t\t\t\t\t\t\tnewLastIdealStyles[i] = newLastIdealStyle;\n\t\t\t\t\t\t\tnewLastIdealVelocities[i] = newLastIdealVelocity;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t// the amount we're looped over above\n\t\t\t\t\t\t_this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n\t\t\t\t\t\t_this.setState({\n\t\t\t\t\t\t\tcurrentStyles: newCurrentStyles,\n\t\t\t\t\t\t\tcurrentVelocities: newCurrentVelocities,\n\t\t\t\t\t\t\tlastIdealStyles: newLastIdealStyles,\n\t\t\t\t\t\t\tlastIdealVelocities: newLastIdealVelocities\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t_this.unreadPropStyles = null;\n\n\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tcomponentDidMount: function componentDidMount() {\n\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t},\n\n\t\t\t\tcomponentWillReceiveProps: function componentWillReceiveProps(props) {\n\t\t\t\t\tif (this.unreadPropStyles != null) {\n\t\t\t\t\t\t// previous props haven't had the chance to be set yet; set them here\n\t\t\t\t\t\tthis.clearUnreadPropStyle(this.unreadPropStyles);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.unreadPropStyles = props.styles(this.state.lastIdealStyles);\n\t\t\t\t\tif (this.animationID == null) {\n\t\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tcomponentWillUnmount: function componentWillUnmount() {\n\t\t\t\t\tif (this.animationID != null) {\n\t\t\t\t\t\t_raf2['default'].cancel(this.animationID);\n\t\t\t\t\t\tthis.animationID = null;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trender: function render() {\n\t\t\t\t\tvar renderedChildren = this.props.children(this.state.currentStyles);\n\t\t\t\t\treturn renderedChildren && _react2['default'].Children.only(renderedChildren);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texports['default'] = StaggeredMotion;\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 13 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\n\t\t\tvar _extends = Object.assign || function (target) {\n\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\tvar source = arguments[i];for (var key in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\t\t\t\t\ttarget[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}return target;\n\t\t\t};\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { 'default': obj };\n\t\t\t}\n\n\t\t\tvar _mapToZero = __webpack_require__(5);\n\n\t\t\tvar _mapToZero2 = _interopRequireDefault(_mapToZero);\n\n\t\t\tvar _stripStyle = __webpack_require__(6);\n\n\t\t\tvar _stripStyle2 = _interopRequireDefault(_stripStyle);\n\n\t\t\tvar _stepper3 = __webpack_require__(7);\n\n\t\t\tvar _stepper4 = _interopRequireDefault(_stepper3);\n\n\t\t\tvar _mergeDiff = __webpack_require__(14);\n\n\t\t\tvar _mergeDiff2 = _interopRequireDefault(_mergeDiff);\n\n\t\t\tvar _performanceNow = __webpack_require__(8);\n\n\t\t\tvar _performanceNow2 = _interopRequireDefault(_performanceNow);\n\n\t\t\tvar _raf = __webpack_require__(10);\n\n\t\t\tvar _raf2 = _interopRequireDefault(_raf);\n\n\t\t\tvar _shouldStopAnimation = __webpack_require__(11);\n\n\t\t\tvar _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);\n\n\t\t\tvar _react = __webpack_require__(2);\n\n\t\t\tvar _react2 = _interopRequireDefault(_react);\n\n\t\t\tvar msPerFrame = 1000 / 60;\n\n\t\t\t// the children function & (potential) styles function asks as param an\n\t\t\t// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format\n\t\t\t// {key: string, data?: any, style: PlainStyle}. However, the way we keep\n\t\t\t// internal states doesn't contain such a data structure (check the state and\n\t\t\t// TransitionMotionState). So when children function and others ask for such\n\t\t\t// data we need to generate them on the fly by combining mergedPropsStyles and\n\t\t\t// currentStyles/lastIdealStyles\n\t\t\tfunction rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {\n\t\t\t\tif (unreadPropStyles == null) {\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\treturn mergedPropsStyles.map(function (mergedPropsStyle, i) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: mergedPropsStyle.key,\n\t\t\t\t\t\t\tdata: mergedPropsStyle.data,\n\t\t\t\t\t\t\tstyle: plainStyles[i]\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn mergedPropsStyles.map(function (mergedPropsStyle, i) {\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\tfor (var j = 0; j < unreadPropStyles.length; j++) {\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\tif (unreadPropStyles[j].key === mergedPropsStyle.key) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\t\t\tkey: unreadPropStyles[j].key,\n\t\t\t\t\t\t\t\tdata: unreadPropStyles[j].data,\n\t\t\t\t\t\t\t\tstyle: plainStyles[i]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\treturn { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {\n\t\t\t\tif (mergedPropsStyles.length !== destStyles.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < mergedPropsStyles.length; i++) {\n\t\t\t\t\tif (mergedPropsStyles[i].key !== destStyles[i].key) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we have the invariant that mergedPropsStyles and\n\t\t\t\t// currentStyles/currentVelocities/last* are synced in terms of cells, see\n\t\t\t\t// mergeAndSync comment for more info\n\t\t\t\tfor (var i = 0; i < mergedPropsStyles.length; i++) {\n\t\t\t\t\tif (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// core key merging logic\n\n\t\t\t// things to do: say previously merged style is {a, b}, dest style (prop) is {b,\n\t\t\t// c}, previous current (interpolating) style is {a, b}\n\t\t\t// **invariant**: current[i] corresponds to merged[i] in terms of key\n\n\t\t\t// steps:\n\t\t\t// turn merged style into {a?, b, c}\n\t\t\t//    add c, value of c is destStyles.c\n\t\t\t//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}\n\t\t\t// turn current (interpolating) style from {a, b} into {a?, b, c}\n\t\t\t//    maybe remove a\n\t\t\t//    certainly add c, value of c is willEnter(c)\n\t\t\t// loop over merged and construct new current\n\t\t\t// dest doesn't change, that's owner's\n\t\t\tfunction mergeAndSync(willEnter, willLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {\n\t\t\t\tvar newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {\n\t\t\t\t\tvar leavingStyle = willLeave(oldMergedPropsStyle);\n\t\t\t\t\tif (leavingStyle == null) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };\n\t\t\t\t});\n\n\t\t\t\tvar newCurrentStyles = [];\n\t\t\t\tvar newCurrentVelocities = [];\n\t\t\t\tvar newLastIdealStyles = [];\n\t\t\t\tvar newLastIdealVelocities = [];\n\t\t\t\tfor (var i = 0; i < newMergedPropsStyles.length; i++) {\n\t\t\t\t\tvar newMergedPropsStyleCell = newMergedPropsStyles[i];\n\t\t\t\t\tvar foundOldIndex = null;\n\t\t\t\t\tfor (var j = 0; j < oldMergedPropsStyles.length; j++) {\n\t\t\t\t\t\tif (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {\n\t\t\t\t\t\t\tfoundOldIndex = j;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: key search code\n\t\t\t\t\tif (foundOldIndex == null) {\n\t\t\t\t\t\tvar plainStyle = willEnter(newMergedPropsStyleCell);\n\t\t\t\t\t\tnewCurrentStyles[i] = plainStyle;\n\t\t\t\t\t\tnewLastIdealStyles[i] = plainStyle;\n\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\tvar velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);\n\t\t\t\t\t\tnewCurrentVelocities[i] = velocity;\n\t\t\t\t\t\tnewLastIdealVelocities[i] = velocity;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewCurrentStyles[i] = oldCurrentStyles[foundOldIndex];\n\t\t\t\t\t\tnewLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];\n\t\t\t\t\t\tnewCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];\n\t\t\t\t\t\tnewLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];\n\t\t\t}\n\n\t\t\tvar TransitionMotion = _react2['default'].createClass({\n\t\t\t\tdisplayName: 'TransitionMotion',\n\n\t\t\t\tpropTypes: {\n\t\t\t\t\tdefaultStyles: _react.PropTypes.arrayOf(_react.PropTypes.shape({\n\t\t\t\t\t\tkey: _react.PropTypes.string.isRequired,\n\t\t\t\t\t\tdata: _react.PropTypes.any,\n\t\t\t\t\t\tstyle: _react.PropTypes.objectOf(_react.PropTypes.number).isRequired\n\t\t\t\t\t})),\n\t\t\t\t\tstyles: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.arrayOf(_react.PropTypes.shape({\n\t\t\t\t\t\tkey: _react.PropTypes.string.isRequired,\n\t\t\t\t\t\tdata: _react.PropTypes.any,\n\t\t\t\t\t\tstyle: _react.PropTypes.objectOf(_react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object])).isRequired\n\t\t\t\t\t}))]).isRequired,\n\t\t\t\t\tchildren: _react.PropTypes.func.isRequired,\n\t\t\t\t\twillLeave: _react.PropTypes.func,\n\t\t\t\t\twillEnter: _react.PropTypes.func\n\t\t\t\t},\n\n\t\t\t\tgetDefaultProps: function getDefaultProps() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twillEnter: function willEnter(styleThatEntered) {\n\t\t\t\t\t\t\treturn _stripStyle2['default'](styleThatEntered.style);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// recall: returning null makes the current unmounting TransitionStyle\n\t\t\t\t\t\t// disappear immediately\n\t\t\t\t\t\twillLeave: function willLeave() {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tgetInitialState: function getInitialState() {\n\t\t\t\t\tvar _props = this.props;\n\t\t\t\t\tvar defaultStyles = _props.defaultStyles;\n\t\t\t\t\tvar styles = _props.styles;\n\t\t\t\t\tvar willEnter = _props.willEnter;\n\t\t\t\t\tvar willLeave = _props.willLeave;\n\n\t\t\t\t\tvar destStyles = typeof styles === 'function' ? styles() : styles;\n\n\t\t\t\t\t// this is special. for the first time around, we don't have a comparison\n\t\t\t\t\t// between last (no last) and current merged props. we'll compute last so:\n\t\t\t\t\t// say default is {a, b} and styles (dest style) is {b, c}, we'll\n\t\t\t\t\t// fabricate last as {a, b}\n\t\t\t\t\tvar oldMergedPropsStyles = undefined;\n\t\t\t\t\tif (defaultStyles == null) {\n\t\t\t\t\t\toldMergedPropsStyles = destStyles;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\toldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {\n\t\t\t\t\t\t\t// TODO: key search code\n\t\t\t\t\t\t\tfor (var i = 0; i < destStyles.length; i++) {\n\t\t\t\t\t\t\t\tif (destStyles[i].key === defaultStyleCell.key) {\n\t\t\t\t\t\t\t\t\treturn destStyles[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn defaultStyleCell;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tvar oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {\n\t\t\t\t\t\treturn _stripStyle2['default'](s.style);\n\t\t\t\t\t}) : defaultStyles.map(function (s) {\n\t\t\t\t\t\treturn _stripStyle2['default'](s.style);\n\t\t\t\t\t});\n\t\t\t\t\tvar oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {\n\t\t\t\t\t\treturn _mapToZero2['default'](s.style);\n\t\t\t\t\t}) : defaultStyles.map(function (s) {\n\t\t\t\t\t\treturn _mapToZero2['default'](s.style);\n\t\t\t\t\t});\n\n\t\t\t\t\tvar _mergeAndSync = mergeAndSync(\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\twillEnter,\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\twillLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really\n\t\t\t\t\toldCurrentVelocities);\n\n\t\t\t\t\tvar mergedPropsStyles = _mergeAndSync[0];\n\t\t\t\t\tvar currentStyles = _mergeAndSync[1];\n\t\t\t\t\tvar currentVelocities = _mergeAndSync[2];\n\t\t\t\t\tvar lastIdealStyles = _mergeAndSync[3];\n\t\t\t\t\tvar lastIdealVelocities = _mergeAndSync[4];\n\t\t\t\t\t// oldLastIdealVelocities really\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcurrentStyles: currentStyles,\n\t\t\t\t\t\tcurrentVelocities: currentVelocities,\n\t\t\t\t\t\tlastIdealStyles: lastIdealStyles,\n\t\t\t\t\t\tlastIdealVelocities: lastIdealVelocities,\n\t\t\t\t\t\tmergedPropsStyles: mergedPropsStyles\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tanimationID: null,\n\t\t\t\tprevTime: 0,\n\t\t\t\taccumulatedTime: 0,\n\t\t\t\t// it's possible that currentStyle's value is stale: if props is immediately\n\t\t\t\t// changed from 0 to 400 to spring(0) again, the async currentStyle is still\n\t\t\t\t// at 0 (didn't have time to tick and interpolate even once). If we naively\n\t\t\t\t// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).\n\t\t\t\t// In reality currentStyle should be 400\n\t\t\t\tunreadPropStyles: null,\n\t\t\t\t// after checking for unreadPropStyles != null, we manually go set the\n\t\t\t\t// non-interpolating values (those that are a number, without a spring\n\t\t\t\t// config)\n\t\t\t\tclearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {\n\t\t\t\t\tvar _mergeAndSync2 = mergeAndSync(\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\tthis.props.willEnter,\n\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\tthis.props.willLeave, this.state.mergedPropsStyles, unreadPropStyles, this.state.currentStyles, this.state.currentVelocities, this.state.lastIdealStyles, this.state.lastIdealVelocities);\n\n\t\t\t\t\tvar mergedPropsStyles = _mergeAndSync2[0];\n\t\t\t\t\tvar currentStyles = _mergeAndSync2[1];\n\t\t\t\t\tvar currentVelocities = _mergeAndSync2[2];\n\t\t\t\t\tvar lastIdealStyles = _mergeAndSync2[3];\n\t\t\t\t\tvar lastIdealVelocities = _mergeAndSync2[4];\n\n\t\t\t\t\tfor (var i = 0; i < unreadPropStyles.length; i++) {\n\t\t\t\t\t\tvar unreadPropStyle = unreadPropStyles[i].style;\n\t\t\t\t\t\tvar dirty = false;\n\n\t\t\t\t\t\tfor (var key in unreadPropStyle) {\n\t\t\t\t\t\t\tif (!unreadPropStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar styleValue = unreadPropStyle[key];\n\t\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\t\tif (!dirty) {\n\t\t\t\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t\t\t\t\tcurrentStyles[i] = _extends({}, currentStyles[i]);\n\t\t\t\t\t\t\t\t\tcurrentVelocities[i] = _extends({}, currentVelocities[i]);\n\t\t\t\t\t\t\t\t\tlastIdealStyles[i] = _extends({}, lastIdealStyles[i]);\n\t\t\t\t\t\t\t\t\tlastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);\n\t\t\t\t\t\t\t\t\tmergedPropsStyles[i] = {\n\t\t\t\t\t\t\t\t\t\tkey: mergedPropsStyles[i].key,\n\t\t\t\t\t\t\t\t\t\tdata: mergedPropsStyles[i].data,\n\t\t\t\t\t\t\t\t\t\tstyle: _extends({}, mergedPropsStyles[i].style)\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcurrentStyles[i][key] = styleValue;\n\t\t\t\t\t\t\t\tcurrentVelocities[i][key] = 0;\n\t\t\t\t\t\t\t\tlastIdealStyles[i][key] = styleValue;\n\t\t\t\t\t\t\t\tlastIdealVelocities[i][key] = 0;\n\t\t\t\t\t\t\t\tmergedPropsStyles[i].style[key] = styleValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// unlike the other 2 components, we can't detect staleness and optionally\n\t\t\t\t\t// opt out of setState here. each style object's data might contain new\n\t\t\t\t\t// stuff we're not/cannot compare\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentStyles: currentStyles,\n\t\t\t\t\t\tcurrentVelocities: currentVelocities,\n\t\t\t\t\t\tmergedPropsStyles: mergedPropsStyles,\n\t\t\t\t\t\tlastIdealStyles: lastIdealStyles,\n\t\t\t\t\t\tlastIdealVelocities: lastIdealVelocities\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tstartAnimationIfNecessary: function startAnimationIfNecessary() {\n\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t// TODO: when config is {a: 10} and dest is {a: 10} do we raf once and\n\t\t\t\t\t// call cb? No, otherwise accidental parent rerender causes cb trigger\n\t\t\t\t\tthis.animationID = _raf2['default'](function () {\n\t\t\t\t\t\tvar propStyles = _this.props.styles;\n\t\t\t\t\t\tvar destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;\n\n\t\t\t\t\t\t// check if we need to animate in the first place\n\t\t\t\t\t\tif (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar currentTime = _performanceNow2['default']();\n\t\t\t\t\t\tvar timeDelta = currentTime - _this.prevTime;\n\t\t\t\t\t\t_this.prevTime = currentTime;\n\t\t\t\t\t\t_this.accumulatedTime = _this.accumulatedTime + timeDelta;\n\t\t\t\t\t\t// more than 10 frames? prolly switched browser tab. Restart\n\t\t\t\t\t\tif (_this.accumulatedTime > msPerFrame * 10) {\n\t\t\t\t\t\t\t_this.accumulatedTime = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_this.accumulatedTime === 0) {\n\t\t\t\t\t\t\t// no need to cancel animationID here; shouldn't have any in flight\n\t\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;\n\t\t\t\t\t\tvar framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);\n\n\t\t\t\t\t\tvar _mergeAndSync3 = mergeAndSync(\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\t_this.props.willEnter,\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\t_this.props.willLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);\n\n\t\t\t\t\t\tvar newMergedPropsStyles = _mergeAndSync3[0];\n\t\t\t\t\t\tvar newCurrentStyles = _mergeAndSync3[1];\n\t\t\t\t\t\tvar newCurrentVelocities = _mergeAndSync3[2];\n\t\t\t\t\t\tvar newLastIdealStyles = _mergeAndSync3[3];\n\t\t\t\t\t\tvar newLastIdealVelocities = _mergeAndSync3[4];\n\n\t\t\t\t\t\tfor (var i = 0; i < newMergedPropsStyles.length; i++) {\n\t\t\t\t\t\t\tvar newMergedPropsStyle = newMergedPropsStyles[i].style;\n\t\t\t\t\t\t\tvar newCurrentStyle = {};\n\t\t\t\t\t\t\tvar newCurrentVelocity = {};\n\t\t\t\t\t\t\tvar newLastIdealStyle = {};\n\t\t\t\t\t\t\tvar newLastIdealVelocity = {};\n\n\t\t\t\t\t\t\tfor (var key in newMergedPropsStyle) {\n\t\t\t\t\t\t\t\tif (!newMergedPropsStyle.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvar styleValue = newMergedPropsStyle[key];\n\t\t\t\t\t\t\t\tif (typeof styleValue === 'number') {\n\t\t\t\t\t\t\t\t\tnewCurrentStyle[key] = styleValue;\n\t\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = 0;\n\t\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = styleValue;\n\t\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar newLastIdealStyleValue = newLastIdealStyles[i][key];\n\t\t\t\t\t\t\t\t\tvar newLastIdealVelocityValue = newLastIdealVelocities[i][key];\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < framesToCatchUp; j++) {\n\t\t\t\t\t\t\t\t\t\tvar _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\t\t\tnewLastIdealStyleValue = _stepper[0];\n\t\t\t\t\t\t\t\t\t\tnewLastIdealVelocityValue = _stepper[1];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);\n\n\t\t\t\t\t\t\t\t\tvar nextIdealX = _stepper2[0];\n\t\t\t\t\t\t\t\t\tvar nextIdealV = _stepper2[1];\n\n\t\t\t\t\t\t\t\t\tnewCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\t\tnewCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;\n\t\t\t\t\t\t\t\t\tnewLastIdealStyle[key] = newLastIdealStyleValue;\n\t\t\t\t\t\t\t\t\tnewLastIdealVelocity[key] = newLastIdealVelocityValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnewLastIdealStyles[i] = newLastIdealStyle;\n\t\t\t\t\t\t\tnewLastIdealVelocities[i] = newLastIdealVelocity;\n\t\t\t\t\t\t\tnewCurrentStyles[i] = newCurrentStyle;\n\t\t\t\t\t\t\tnewCurrentVelocities[i] = newCurrentVelocity;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this.animationID = null;\n\t\t\t\t\t\t// the amount we're looped over above\n\t\t\t\t\t\t_this.accumulatedTime -= framesToCatchUp * msPerFrame;\n\n\t\t\t\t\t\t_this.setState({\n\t\t\t\t\t\t\tcurrentStyles: newCurrentStyles,\n\t\t\t\t\t\t\tcurrentVelocities: newCurrentVelocities,\n\t\t\t\t\t\t\tlastIdealStyles: newLastIdealStyles,\n\t\t\t\t\t\t\tlastIdealVelocities: newLastIdealVelocities,\n\t\t\t\t\t\t\tmergedPropsStyles: newMergedPropsStyles\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t_this.unreadPropStyles = null;\n\n\t\t\t\t\t\t_this.startAnimationIfNecessary();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tcomponentDidMount: function componentDidMount() {\n\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t},\n\n\t\t\t\tcomponentWillReceiveProps: function componentWillReceiveProps(props) {\n\t\t\t\t\tif (this.unreadPropStyles) {\n\t\t\t\t\t\t// previous props haven't had the chance to be set yet; set them here\n\t\t\t\t\t\tthis.clearUnreadPropStyle(this.unreadPropStyles);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof props.styles === 'function') {\n\t\t\t\t\t\t// $FlowFixMe\n\t\t\t\t\t\tthis.unreadPropStyles = props.styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.unreadPropStyles = props.styles;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.animationID == null) {\n\t\t\t\t\t\tthis.prevTime = _performanceNow2['default']();\n\t\t\t\t\t\tthis.startAnimationIfNecessary();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tcomponentWillUnmount: function componentWillUnmount() {\n\t\t\t\t\tif (this.animationID != null) {\n\t\t\t\t\t\t_raf2['default'].cancel(this.animationID);\n\t\t\t\t\t\tthis.animationID = null;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trender: function render() {\n\t\t\t\t\tvar hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);\n\t\t\t\t\tvar renderedChildren = this.props.children(hydratedStyles);\n\t\t\t\t\treturn renderedChildren && _react2['default'].Children.only(renderedChildren);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texports['default'] = TransitionMotion;\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t// list of styles, each containing interpolating values. Part of what's passed\n\t\t\t// to children function. Notice that this is\n\t\t\t// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,\n\t\t\t// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles\n\t\t\t// contains the key & data info (so that we only have a single source of truth\n\t\t\t// for these, and to save space). Check the comment for `rehydrateStyles` to\n\t\t\t// see how we regenerate the entirety of what's passed to children function\n\n\t\t\t// the array that keeps track of currently rendered stuff! Including stuff\n\t\t\t// that you've unmounted but that's still animating. This is where it lives\n\n\t\t\t/***/\n\t\t},\n\t\t/* 14 */\n\t\t/***/function (module, exports) {\n\n\t\t\t// core keys merging algorithm. If previous render's keys are [a, b], and the\n\t\t\t// next render's [c, b, d], what's the final merged keys and ordering?\n\n\t\t\t// - c and a must both be before b\n\t\t\t// - b before d\n\t\t\t// - ordering between a and c ambiguous\n\n\t\t\t// this reduces to merging two partially ordered lists (e.g. lists where not\n\t\t\t// every item has a definite ordering, like comparing a and c above). For the\n\t\t\t// ambiguous ordering we deterministically choose to place the next render's\n\t\t\t// item after the previous'; so c after a\n\n\t\t\t// this is called a topological sorting. Except the existing algorithms don't\n\t\t\t// work well with js bc of the amount of allocation, and isn't optimized for our\n\t\t\t// current use-case bc the runtime is linear in terms of edges (see wiki for\n\t\t\t// meaning), which is huge when two lists have many common elements\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\t\t\texports['default'] = mergeDiff;\n\n\t\t\tfunction mergeDiff(prev, next, onRemove) {\n\t\t\t\t// bookkeeping for easier access of a key's index below. This is 2 allocations +\n\t\t\t\t// potentially triggering chrome hash map mode for objs (so it might be faster\n\n\t\t\t\tvar prevKeyIndex = {};\n\t\t\t\tfor (var i = 0; i < prev.length; i++) {\n\t\t\t\t\tprevKeyIndex[prev[i].key] = i;\n\t\t\t\t}\n\t\t\t\tvar nextKeyIndex = {};\n\t\t\t\tfor (var i = 0; i < next.length; i++) {\n\t\t\t\t\tnextKeyIndex[next[i].key] = i;\n\t\t\t\t}\n\n\t\t\t\t// first, an overly elaborate way of merging prev and next, eliminating\n\t\t\t\t// duplicates (in terms of keys). If there's dupe, keep the item in next).\n\t\t\t\t// This way of writing it saves allocations\n\t\t\t\tvar ret = [];\n\t\t\t\tfor (var i = 0; i < next.length; i++) {\n\t\t\t\t\tret[i] = next[i];\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < prev.length; i++) {\n\t\t\t\t\tif (!nextKeyIndex.hasOwnProperty(prev[i].key)) {\n\t\t\t\t\t\t// this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n\t\t\t\t\t\t// merge in keys that the user desires to kill\n\t\t\t\t\t\tvar fill = onRemove(i, prev[i]);\n\t\t\t\t\t\tif (fill != null) {\n\t\t\t\t\t\t\tret.push(fill);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// now all the items all present. Core sorting logic to have the right order\n\t\t\t\treturn ret.sort(function (a, b) {\n\t\t\t\t\tvar nextOrderA = nextKeyIndex[a.key];\n\t\t\t\t\tvar nextOrderB = nextKeyIndex[b.key];\n\t\t\t\t\tvar prevOrderA = prevKeyIndex[a.key];\n\t\t\t\t\tvar prevOrderB = prevKeyIndex[b.key];\n\n\t\t\t\t\tif (nextOrderA != null && nextOrderB != null) {\n\t\t\t\t\t\t// both keys in next\n\t\t\t\t\t\treturn nextKeyIndex[a.key] - nextKeyIndex[b.key];\n\t\t\t\t\t} else if (prevOrderA != null && prevOrderB != null) {\n\t\t\t\t\t\t// both keys in prev\n\t\t\t\t\t\treturn prevKeyIndex[a.key] - prevKeyIndex[b.key];\n\t\t\t\t\t} else if (nextOrderA != null) {\n\t\t\t\t\t\t// key a in next, key b in prev\n\n\t\t\t\t\t\t// how to determine the order between a and b? We find a \"pivot\" (term\n\t\t\t\t\t\t// abuse), a key present in both prev and next, that is sandwiched between\n\t\t\t\t\t\t// a and b. In the context of our above example, if we're comparing a and\n\t\t\t\t\t\t// d, b's (the only) pivot\n\t\t\t\t\t\tfor (var i = 0; i < next.length; i++) {\n\t\t\t\t\t\t\tvar pivot = next[i].key;\n\t\t\t\t\t\t\tif (!prevKeyIndex.hasOwnProperty(pivot)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t} else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// pluggable. default to: next bigger than prev\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\t// prevOrderA, nextOrderB\n\t\t\t\t\tfor (var i = 0; i < next.length; i++) {\n\t\t\t\t\t\tvar pivot = next[i].key;\n\t\t\t\t\t\tif (!prevKeyIndex.hasOwnProperty(pivot)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t} else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// pluggable. default to: next bigger than prev\n\t\t\t\t\treturn -1;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tmodule.exports = exports['default'];\n\t\t\t// to loop through and find a key's index each time), but I no longer care\n\n\t\t\t/***/\n\t\t},\n\t\t/* 15 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\texports.__esModule = true;\n\n\t\t\tvar _extends = Object.assign || function (target) {\n\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\tvar source = arguments[i];for (var key in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\t\t\t\t\ttarget[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}return target;\n\t\t\t};\n\n\t\t\texports['default'] = spring;\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { 'default': obj };\n\t\t\t}\n\n\t\t\tvar _presets = __webpack_require__(16);\n\n\t\t\tvar _presets2 = _interopRequireDefault(_presets);\n\n\t\t\tvar defaultConfig = _extends({}, _presets2['default'].noWobble, {\n\t\t\t\tprecision: 0.01\n\t\t\t});\n\n\t\t\tfunction spring(val, config) {\n\t\t\t\treturn _extends({}, defaultConfig, config, { val: val });\n\t\t\t}\n\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 16 */\n\t\t/***/function (module, exports) {\n\n\t\t\t\"use strict\";\n\n\t\t\texports.__esModule = true;\n\t\t\texports[\"default\"] = {\n\t\t\t\tnoWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided\n\t\t\t\tgentle: { stiffness: 120, damping: 14 },\n\t\t\t\twobbly: { stiffness: 180, damping: 12 },\n\t\t\t\tstiff: { stiffness: 210, damping: 20 }\n\t\t\t};\n\t\t\tmodule.exports = exports[\"default\"];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 17 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t/* WEBPACK VAR INJECTION */(function (process) {\n\t\t\t\t'use strict';\n\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports['default'] = reorderKeys;\n\n\t\t\t\tvar hasWarned = false;\n\n\t\t\t\tfunction reorderKeys() {\n\t\t\t\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\t\t\t\tif (!hasWarned) {\n\t\t\t\t\t\t\thasWarned = true;\n\t\t\t\t\t\t\tconsole.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\\'s new styles array API.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmodule.exports = exports['default'];\n\t\t\t\t/* WEBPACK VAR INJECTION */\n\t\t\t}).call(exports, __webpack_require__(9));\n\n\t\t\t/***/\n\t\t},\n\t\t/* 18 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\texports.default = ensureSpring;\n\n\t\t\tvar _reactMotion = __webpack_require__(3);\n\n\t\t\tfunction ensureSpring(styles) {\n\t\t\t\treturn Object.keys(styles).reduce(function (acc, key) {\n\t\t\t\t\tvar value = styles[key];\n\t\t\t\t\tacc[key] = typeof value === 'number' ? (0, _reactMotion.spring)(value) : value;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {});\n\t\t\t}\n\n\t\t\t/***/\n\t\t},\n\t\t/* 19 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _reactMotion = __webpack_require__(3);\n\n\t\t\tvar fadeConfig = { stiffness: 200, damping: 22 };\n\t\t\tvar popConfig = { stiffness: 360, damping: 25 };\n\t\t\tvar slideConfig = { stiffness: 330, damping: 30 };\n\n\t\t\tvar fade = {\n\t\t\t\tatEnter: {\n\t\t\t\t\topacity: 0\n\t\t\t\t},\n\t\t\t\tatLeave: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(0, fadeConfig)\n\t\t\t\t},\n\t\t\t\tatActive: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(1, fadeConfig)\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar pop = {\n\t\t\t\tatEnter: {\n\t\t\t\t\tscale: 0.8,\n\t\t\t\t\topacity: 0\n\t\t\t\t},\n\t\t\t\tatLeave: {\n\t\t\t\t\tscale: (0, _reactMotion.spring)(0.8, popConfig),\n\t\t\t\t\topacity: (0, _reactMotion.spring)(0, popConfig)\n\t\t\t\t},\n\t\t\t\tatActive: {\n\t\t\t\t\tscale: (0, _reactMotion.spring)(1, popConfig),\n\t\t\t\t\topacity: 1\n\t\t\t\t},\n\t\t\t\tmapStyles: function mapStyles(styles) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\topacity: styles.opacity,\n\t\t\t\t\t\ttransform: 'scale(' + styles.scale + ')'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar slideLeft = {\n\t\t\t\tatEnter: {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\toffset: 100\n\t\t\t\t},\n\t\t\t\tatLeave: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(0, fadeConfig),\n\t\t\t\t\toffset: (0, _reactMotion.spring)(-100, slideConfig)\n\t\t\t\t},\n\t\t\t\tatActive: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(1, slideConfig),\n\t\t\t\t\toffset: (0, _reactMotion.spring)(0, slideConfig)\n\t\t\t\t},\n\t\t\t\tmapStyles: function mapStyles(styles) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\topacity: styles.opacity,\n\t\t\t\t\t\ttransform: 'translateX(' + styles.offset + '%)'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar slideRight = {\n\t\t\t\tatEnter: {\n\t\t\t\t\topacity: 0,\n\t\t\t\t\toffset: -100\n\t\t\t\t},\n\t\t\t\tatLeave: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(0, fadeConfig),\n\t\t\t\t\toffset: (0, _reactMotion.spring)(100, slideConfig)\n\t\t\t\t},\n\t\t\t\tatActive: {\n\t\t\t\t\topacity: (0, _reactMotion.spring)(1, slideConfig),\n\t\t\t\t\toffset: (0, _reactMotion.spring)(0, slideConfig)\n\t\t\t\t},\n\t\t\t\tmapStyles: function mapStyles(styles) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\topacity: styles.opacity,\n\t\t\t\t\t\ttransform: 'translateX(' + styles.offset + '%)'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\texports.default = { fade: fade, pop: pop, slideLeft: slideLeft, slideRight: slideRight };\n\n\t\t\t/***/\n\t\t}\n\t\t/******/])\n\t);\n});\n;\n//# sourceMappingURL=react-router-transition.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(104)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},104:function(module,exports){eval('"use strict";\n\nmodule.exports = function (module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function () {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0QsTUFBVCxFQUFpQjtBQUNqQyxLQUFHLENBQUNBLE9BQU9FLGVBQVgsRUFBNEI7QUFDM0JGLFNBQU9HLFNBQVAsR0FBbUIsWUFBVyxDQUFFLENBQWhDO0FBQ0FILFNBQU9JLEtBQVAsR0FBZSxFQUFmO0FBQ0E7QUFDQUosU0FBT0ssUUFBUCxHQUFrQixFQUFsQjtBQUNBTCxTQUFPRSxlQUFQLEdBQXlCLENBQXpCO0FBQ0E7QUFDRCxRQUFPRixNQUFQO0FBQ0EsQ0FURCIsImZpbGUiOiIxMDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9')}});